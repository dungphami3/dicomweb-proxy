{"version":3,"file":"199.bundle.7a7a6764a3f2f8d65e68.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-rt/src/id.js","webpack:///../../../extensions/cornerstone-dicom-rt/src/loadRTStruct.js","webpack:///../../../extensions/cornerstone-dicom-rt/src/getSopClassHandlerModule.js","webpack:///../../../extensions/cornerstone-dicom-rt/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerName = 'dicom-rt';\r\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\r\n\r\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\r\n","import dcmjs from 'dcmjs';\r\nconst { DicomMessage, DicomMetaDictionary } = dcmjs.data;\r\nconst dicomlab2RGB = dcmjs.data.Colors.dicomlab2RGB;\r\n\r\nasync function checkAndLoadContourData(instance, datasource) {\r\n  if (!instance || !instance.ROIContourSequence) {\r\n    return Promise.reject('Invalid instance object or ROIContourSequence');\r\n  }\r\n\r\n  const promisesMap = new Map();\r\n\r\n  for (const ROIContour of instance.ROIContourSequence) {\r\n    const referencedROINumber = ROIContour.ReferencedROINumber;\r\n    if (!ROIContour || !ROIContour.ContourSequence) {\r\n      promisesMap.set(referencedROINumber, [Promise.resolve([])]);\r\n      continue;\r\n    }\r\n\r\n    for (const Contour of ROIContour.ContourSequence) {\r\n      if (!Contour || !Contour.ContourData) {\r\n        return Promise.reject('Invalid Contour or ContourData');\r\n      }\r\n\r\n      const contourData = Contour.ContourData;\r\n\r\n      if (Array.isArray(contourData)) {\r\n        promisesMap.has(referencedROINumber)\r\n          ? promisesMap\r\n              .get(referencedROINumber)\r\n              .push(Promise.resolve(contourData))\r\n          : promisesMap.set(referencedROINumber, [\r\n              Promise.resolve(contourData),\r\n            ]);\r\n      } else if (contourData && contourData.BulkDataURI) {\r\n        const bulkDataURI = contourData.BulkDataURI;\r\n\r\n        if (\r\n          !datasource ||\r\n          !datasource.retrieve ||\r\n          !datasource.retrieve.bulkDataURI\r\n        ) {\r\n          return Promise.reject(\r\n            'Invalid datasource object or retrieve function'\r\n          );\r\n        }\r\n\r\n        const bulkDataPromise = datasource.retrieve.bulkDataURI({\r\n          BulkDataURI: bulkDataURI,\r\n          StudyInstanceUID: instance.StudyInstanceUID,\r\n          SeriesInstanceUID: instance.SeriesInstanceUID,\r\n          SOPInstanceUID: instance.SOPInstanceUID,\r\n        });\r\n\r\n        promisesMap.has(referencedROINumber)\r\n          ? promisesMap.get(referencedROINumber).push(bulkDataPromise)\r\n          : promisesMap.set(referencedROINumber, [bulkDataPromise]);\r\n      } else {\r\n        return Promise.reject(`Invalid ContourData: ${contourData}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  const resolvedPromisesMap = new Map();\r\n  for (const [key, promiseArray] of promisesMap.entries()) {\r\n    resolvedPromisesMap.set(key, await Promise.allSettled(promiseArray));\r\n  }\r\n\r\n  instance.ROIContourSequence.forEach(ROIContour => {\r\n    try {\r\n      const referencedROINumber = ROIContour.ReferencedROINumber;\r\n      const resolvedPromises = resolvedPromisesMap.get(referencedROINumber);\r\n\r\n      if (ROIContour.ContourSequence) {\r\n        ROIContour.ContourSequence.forEach((Contour, index) => {\r\n          const promise = resolvedPromises[index];\r\n          if (promise.status === 'fulfilled') {\r\n            if (\r\n              Array.isArray(promise.value) &&\r\n              promise.value.every(Number.isFinite)\r\n            ) {\r\n              // If promise.value is already an array of numbers, use it directly\r\n              Contour.ContourData = promise.value;\r\n            } else {\r\n              // If the resolved promise value is a byte array (Blob), it needs to be decoded\r\n              const uint8Array = new Uint8Array(promise.value);\r\n              const textDecoder = new TextDecoder();\r\n              const dataUint8Array = textDecoder.decode(uint8Array);\r\n              if (\r\n                typeof dataUint8Array === 'string' &&\r\n                dataUint8Array.includes('\\\\')\r\n              ) {\r\n                Contour.ContourData = dataUint8Array\r\n                  .split('\\\\')\r\n                  .map(parseFloat);\r\n              } else {\r\n                Contour.ContourData = [];\r\n              }\r\n            }\r\n          } else {\r\n            console.error(promise.reason);\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport default async function loadRTStruct(\r\n  extensionManager,\r\n  rtStructDisplaySet,\r\n  referencedDisplaySet,\r\n  headers\r\n) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n  const { bulkDataURI } = dataSource.getConfig?.() || {};\r\n\r\n  const { dicomLoaderService } = utilityModule.exports;\r\n  const imageIdSopInstanceUidPairs = _getImageIdSopInstanceUidPairsForDisplaySet(\r\n    referencedDisplaySet\r\n  );\r\n\r\n  // Set here is loading is asynchronous.\r\n  // If this function throws its set back to false.\r\n  rtStructDisplaySet.isLoaded = true;\r\n  let instance = rtStructDisplaySet.instance;\r\n\r\n  if (!bulkDataURI || !bulkDataURI.enabled) {\r\n    const segArrayBuffer = await dicomLoaderService.findDicomDataPromise(\r\n      rtStructDisplaySet,\r\n      null,\r\n      headers\r\n    );\r\n\r\n    const dicomData = DicomMessage.readFile(segArrayBuffer);\r\n    const rtStructDataset = DicomMetaDictionary.naturalizeDataset(\r\n      dicomData.dict\r\n    );\r\n    rtStructDataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\r\n    instance = rtStructDataset;\r\n  } else {\r\n    await checkAndLoadContourData(instance, dataSource);\r\n  }\r\n\r\n  const {\r\n    StructureSetROISequence,\r\n    ROIContourSequence,\r\n    RTROIObservationsSequence,\r\n  } = instance;\r\n\r\n  // Define our structure set entry and add it to the rtstruct module state.\r\n  const structureSet = {\r\n    StructureSetLabel: instance.StructureSetLabel,\r\n    SeriesInstanceUID: instance.SeriesInstanceUID,\r\n    ROIContours: [],\r\n    visible: true,\r\n  };\r\n\r\n  for (let i = 0; i < ROIContourSequence.length; i++) {\r\n    const ROIContour = ROIContourSequence[i];\r\n    const { ContourSequence } = ROIContour;\r\n\r\n    if (!ContourSequence) {\r\n      continue;\r\n    }\r\n\r\n    const isSupported = false;\r\n\r\n    const ContourSequenceArray = _toArray(ContourSequence);\r\n\r\n    const contourPoints = [];\r\n    for (let c = 0; c < ContourSequenceArray.length; c++) {\r\n      const {\r\n        ContourImageSequence,\r\n        ContourData,\r\n        NumberOfContourPoints,\r\n        ContourGeometricType,\r\n      } = ContourSequenceArray[c];\r\n\r\n      let isSupported = false;\r\n\r\n      const points = [];\r\n      for (let p = 0; p < NumberOfContourPoints * 3; p += 3) {\r\n        points.push({\r\n          x: ContourData[p],\r\n          y: ContourData[p + 1],\r\n          z: ContourData[p + 2],\r\n        });\r\n      }\r\n\r\n      switch (ContourGeometricType) {\r\n        case 'CLOSED_PLANAR':\r\n        case 'OPEN_PLANAR':\r\n        case 'POINT':\r\n          isSupported = true;\r\n\r\n          break;\r\n        default:\r\n          continue;\r\n      }\r\n\r\n      contourPoints.push({\r\n        numberOfPoints: NumberOfContourPoints,\r\n        points,\r\n        type: ContourGeometricType,\r\n        isSupported,\r\n      });\r\n    }\r\n\r\n    _setROIContourMetadata(\r\n      structureSet,\r\n      StructureSetROISequence,\r\n      RTROIObservationsSequence,\r\n      ROIContour,\r\n      contourPoints,\r\n      isSupported\r\n    );\r\n  }\r\n  return structureSet;\r\n}\r\n\r\nconst _getImageId = (imageIdSopInstanceUidPairs, sopInstanceUID) => {\r\n  const imageIdSopInstanceUidPairsEntry = imageIdSopInstanceUidPairs.find(\r\n    imageIdSopInstanceUidPairsEntry =>\r\n      imageIdSopInstanceUidPairsEntry.sopInstanceUID === sopInstanceUID\r\n  );\r\n\r\n  return imageIdSopInstanceUidPairsEntry\r\n    ? imageIdSopInstanceUidPairsEntry.imageId\r\n    : null;\r\n};\r\n\r\nfunction _getImageIdSopInstanceUidPairsForDisplaySet(referencedDisplaySet) {\r\n  return referencedDisplaySet.images.map(image => {\r\n    return {\r\n      imageId: image.imageId,\r\n      sopInstanceUID: image.SOPInstanceUID,\r\n    };\r\n  });\r\n}\r\n\r\nfunction _setROIContourMetadata(\r\n  structureSet,\r\n  StructureSetROISequence,\r\n  RTROIObservationsSequence,\r\n  ROIContour,\r\n  contourPoints,\r\n  isSupported\r\n) {\r\n  const StructureSetROI = StructureSetROISequence.find(\r\n    structureSetROI =>\r\n      structureSetROI.ROINumber === ROIContour.ReferencedROINumber\r\n  );\r\n\r\n  const ROIContourData = {\r\n    ROINumber: StructureSetROI.ROINumber,\r\n    ROIName: StructureSetROI.ROIName,\r\n    ROIGenerationAlgorithm: StructureSetROI.ROIGenerationAlgorithm,\r\n    ROIDescription: StructureSetROI.ROIDescription,\r\n    isSupported,\r\n    contourPoints,\r\n    visible: true,\r\n  };\r\n\r\n  _setROIContourDataColor(ROIContour, ROIContourData);\r\n\r\n  if (RTROIObservationsSequence) {\r\n    // If present, add additional RTROIObservations metadata.\r\n    _setROIContourRTROIObservations(\r\n      ROIContourData,\r\n      RTROIObservationsSequence,\r\n      ROIContour.ReferencedROINumber\r\n    );\r\n  }\r\n\r\n  structureSet.ROIContours.push(ROIContourData);\r\n}\r\n\r\nfunction _setROIContourDataColor(ROIContour, ROIContourData) {\r\n  let { ROIDisplayColor, RecommendedDisplayCIELabValue } = ROIContour;\r\n\r\n  if (!ROIDisplayColor && RecommendedDisplayCIELabValue) {\r\n    // If ROIDisplayColor is absent, try using the RecommendedDisplayCIELabValue color.\r\n    ROIDisplayColor = dicomlab2RGB(RecommendedDisplayCIELabValue);\r\n  }\r\n\r\n  if (ROIDisplayColor) {\r\n    ROIContourData.colorArray = [...ROIDisplayColor];\r\n  }\r\n}\r\n\r\nfunction _setROIContourRTROIObservations(\r\n  ROIContourData,\r\n  RTROIObservationsSequence,\r\n  ROINumber\r\n) {\r\n  const RTROIObservations = RTROIObservationsSequence.find(\r\n    RTROIObservations => RTROIObservations.ReferencedROINumber === ROINumber\r\n  );\r\n\r\n  if (RTROIObservations) {\r\n    // Deep copy so we don't keep the reference to the dcmjs dataset entry.\r\n    const {\r\n      ObservationNumber,\r\n      ROIObservationDescription,\r\n      RTROIInterpretedType,\r\n      ROIInterpreter,\r\n    } = RTROIObservations;\r\n\r\n    ROIContourData.RTROIObservations = {\r\n      ObservationNumber,\r\n      ROIObservationDescription,\r\n      RTROIInterpretedType,\r\n      ROIInterpreter,\r\n    };\r\n  }\r\n}\r\n\r\nfunction _toArray(objOrArray) {\r\n  return Array.isArray(objOrArray) ? objOrArray : [objOrArray];\r\n}\r\n","import { utils } from '@ohif/core';\r\n\r\nimport { SOPClassHandlerId } from './id';\r\nimport loadRTStruct from './loadRTStruct';\r\n\r\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.481.3'];\r\n\r\nlet loadPromises = {};\r\n\r\nfunction _getDisplaySetsFromSeries(\r\n  instances,\r\n  servicesManager,\r\n  extensionManager\r\n) {\r\n  const instance = instances[0];\r\n\r\n  const {\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPClassUID,\r\n    wadoRoot,\r\n    wadoUri,\r\n    wadoUriRoot,\r\n  } = instance;\r\n\r\n  const displaySet = {\r\n    Modality: 'RTSTRUCT',\r\n    loading: false,\r\n    isReconstructable: false, // by default for now since it is a volumetric SEG currently\r\n    displaySetInstanceUID: utils.guid(),\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    referencedImages: null,\r\n    referencedSeriesInstanceUID: null,\r\n    referencedDisplaySetInstanceUID: null,\r\n    isDerivedDisplaySet: true,\r\n    isLoaded: false,\r\n    isHydrated: false,\r\n    structureSet: null,\r\n    sopClassUids,\r\n    instance,\r\n    wadoRoot,\r\n    wadoUriRoot,\r\n    wadoUri,\r\n    isOverlayDisplaySet: true,\r\n  };\r\n\r\n  let referencedSeriesSequence = instance.ReferencedSeriesSequence;\r\n  if (\r\n    instance.ReferencedFrameOfReferenceSequence &&\r\n    !instance.ReferencedSeriesSequence\r\n  ) {\r\n    instance.ReferencedSeriesSequence = _deriveReferencedSeriesSequenceFromFrameOfReferenceSequence(\r\n      instance.ReferencedFrameOfReferenceSequence\r\n    );\r\n    referencedSeriesSequence = instance.ReferencedSeriesSequence;\r\n  }\r\n\r\n  if (!referencedSeriesSequence) {\r\n    throw new Error('ReferencedSeriesSequence is missing for the RTSTRUCT');\r\n  }\r\n\r\n  const referencedSeries = referencedSeriesSequence[0];\r\n\r\n  displaySet.referencedImages =\r\n    instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\r\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\r\n\r\n  displaySet.getReferenceDisplaySet = () => {\r\n    const { DisplaySetService } = servicesManager.services;\r\n    const referencedDisplaySets = DisplaySetService.getDisplaySetsForSeries(\r\n      displaySet.referencedSeriesInstanceUID\r\n    );\r\n\r\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\r\n      throw new Error('Referenced DisplaySet is missing for the RT');\r\n    }\r\n\r\n    const referencedDisplaySet = referencedDisplaySets[0];\r\n\r\n    displaySet.referencedDisplaySetInstanceUID =\r\n      referencedDisplaySet.displaySetInstanceUID;\r\n\r\n    return referencedDisplaySet;\r\n  };\r\n\r\n  displaySet.load = ({ headers }) =>\r\n    _load(displaySet, servicesManager, extensionManager, headers);\r\n\r\n  return [displaySet];\r\n}\r\n\r\nfunction _load(rtDisplaySet, servicesManager, extensionManager, headers) {\r\n  const { SOPInstanceUID } = rtDisplaySet;\r\n  const { segmentationService } = servicesManager.services;\r\n  if (\r\n    (rtDisplaySet.loading || rtDisplaySet.isLoaded) &&\r\n    loadPromises[SOPInstanceUID] &&\r\n    _segmentationExistsInCache(rtDisplaySet, segmentationService)\r\n  ) {\r\n    return loadPromises[SOPInstanceUID];\r\n  }\r\n\r\n  rtDisplaySet.loading = true;\r\n\r\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\r\n  // and also return the same promise to any other callers.\r\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\r\n    if (!rtDisplaySet.structureSet) {\r\n      const structureSet = await loadRTStruct(\r\n        extensionManager,\r\n        rtDisplaySet,\r\n        rtDisplaySet.getReferenceDisplaySet(),\r\n        headers\r\n      );\r\n\r\n      rtDisplaySet.structureSet = structureSet;\r\n    }\r\n\r\n    const suppressEvents = true;\r\n    segmentationService\r\n      .createSegmentationForRTDisplaySet(rtDisplaySet, null, suppressEvents)\r\n      .then(() => {\r\n        rtDisplaySet.loading = false;\r\n        resolve();\r\n      })\r\n      .catch(error => {\r\n        rtDisplaySet.loading = false;\r\n        reject(error);\r\n      });\r\n  });\r\n\r\n  return loadPromises[SOPInstanceUID];\r\n}\r\n\r\nfunction _deriveReferencedSeriesSequenceFromFrameOfReferenceSequence(\r\n  ReferencedFrameOfReferenceSequence\r\n) {\r\n  const ReferencedSeriesSequence = [];\r\n\r\n  ReferencedFrameOfReferenceSequence.forEach(referencedFrameOfReference => {\r\n    const { RTReferencedStudySequence } = referencedFrameOfReference;\r\n\r\n    RTReferencedStudySequence.forEach(rtReferencedStudy => {\r\n      const { RTReferencedSeriesSequence } = rtReferencedStudy;\r\n\r\n      RTReferencedSeriesSequence.forEach(rtReferencedSeries => {\r\n        const ReferencedInstanceSequence = [];\r\n        const { ContourImageSequence, SeriesInstanceUID } = rtReferencedSeries;\r\n\r\n        ContourImageSequence.forEach(contourImage => {\r\n          ReferencedInstanceSequence.push({\r\n            ReferencedSOPInstanceUID: contourImage.ReferencedSOPInstanceUID,\r\n            ReferencedSOPClassUID: contourImage.ReferencedSOPClassUID,\r\n          });\r\n        });\r\n\r\n        const referencedSeries = {\r\n          SeriesInstanceUID,\r\n          ReferencedInstanceSequence,\r\n        };\r\n\r\n        ReferencedSeriesSequence.push(referencedSeries);\r\n      });\r\n    });\r\n  });\r\n\r\n  return ReferencedSeriesSequence;\r\n}\r\n\r\nfunction _segmentationExistsInCache(rtDisplaySet, segmentationService) {\r\n  // Todo: fix this\r\n  return false;\r\n  // This should be abstracted with the CornerstoneCacheService\r\n  const rtContourId = rtDisplaySet.displaySetInstanceUID;\r\n  const contour = segmentationService.getContour(rtContourId);\r\n\r\n  return contour !== undefined;\r\n}\r\n\r\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\r\n  return [\r\n    {\r\n      name: 'dicom-rt',\r\n      sopClassUids,\r\n      getDisplaySetsFromSeries: instances => {\r\n        return _getDisplaySetsFromSeries(\r\n          instances,\r\n          servicesManager,\r\n          extensionManager\r\n        );\r\n      },\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getSopClassHandlerModule;\r\n","import { id } from './id';\r\nimport React from 'react';\r\nimport { Types } from '@ohif/core';\r\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(\r\n    /* webpackPrefetch: true */ './viewports/OHIFCornerstoneRTViewport'\r\n  );\r\n});\r\n\r\nconst OHIFCornerstoneRTViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst extension: Types.Extensions.Extension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n\r\n  /**\r\n   * PanelModule should provide a list of panels that will be available in OHIF\r\n   * for Modes to consume and render. Each panel is defined by a {name,\r\n   * iconName, iconLabel, label, component} object. Example of a panel module\r\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\r\n   */\r\n  getViewportModule({\r\n    servicesManager,\r\n    extensionManager,\r\n  }: Types.Extensions.ExtensionParams) {\r\n    const ExtendedOHIFCornerstoneRTViewport = props => {\r\n      return (\r\n        <OHIFCornerstoneRTViewport\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [{ name: 'dicom-rt', component: ExtendedOHIFCornerstoneRTViewport }];\r\n  },\r\n  /**\r\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\r\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\r\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\r\n   * Examples include the default sop class handler provided by the default extension\r\n   */\r\n  getSopClassHandlerModule,\r\n};\r\n\r\nexport default extension;\r\n"],"names":["id","packageJson","SOPClassHandlerId","DicomMessage","DicomMetaDictionary","dcmjs","dicomlab2RGB","Colors","async","loadRTStruct","extensionManager","rtStructDisplaySet","referencedDisplaySet","headers","utilityModule","getModuleEntry","dataSource","getActiveDataSource","bulkDataURI","getConfig","dicomLoaderService","exports","images","map","image","imageId","sopInstanceUID","SOPInstanceUID","_getImageIdSopInstanceUidPairsForDisplaySet","isLoaded","instance","enabled","datasource","ROIContourSequence","Promise","reject","promisesMap","Map","ROIContour","referencedROINumber","ReferencedROINumber","ContourSequence","Contour","ContourData","contourData","Array","isArray","has","get","push","resolve","set","BulkDataURI","retrieve","bulkDataPromise","StudyInstanceUID","SeriesInstanceUID","resolvedPromisesMap","key","promiseArray","entries","allSettled","forEach","resolvedPromises","index","promise","status","value","every","Number","isFinite","uint8Array","Uint8Array","dataUint8Array","TextDecoder","decode","includes","split","parseFloat","console","error","reason","checkAndLoadContourData","segArrayBuffer","findDicomDataPromise","dicomData","readFile","rtStructDataset","naturalizeDataset","dict","_meta","namifyDataset","meta","StructureSetROISequence","RTROIObservationsSequence","structureSet","StructureSetLabel","ROIContours","visible","i","length","isSupported","ContourSequenceArray","objOrArray","contourPoints","c","ContourImageSequence","NumberOfContourPoints","ContourGeometricType","points","p","x","y","z","numberOfPoints","type","_setROIContourMetadata","StructureSetROI","find","structureSetROI","ROINumber","ROIContourData","ROIName","ROIGenerationAlgorithm","ROIDescription","ROIDisplayColor","RecommendedDisplayCIELabValue","colorArray","_setROIContourDataColor","RTROIObservations","ObservationNumber","ROIObservationDescription","RTROIInterpretedType","ROIInterpreter","_setROIContourRTROIObservations","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isHydrated","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","ReferencedFrameOfReferenceSequence","referencedFrameOfReference","RTReferencedStudySequence","rtReferencedStudy","RTReferencedSeriesSequence","rtReferencedSeries","ReferencedInstanceSequence","contourImage","ReferencedSOPInstanceUID","ReferencedSOPClassUID","referencedSeries","_deriveReferencedSeriesSequenceFromFrameOfReferenceSequence","Error","getReferenceDisplaySet","DisplaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","load","_ref","rtDisplaySet","segmentationService","suppressEvents","createSegmentationForRTDisplaySet","then","catch","_load","_ref2","name","getDisplaySetsFromSeries","Component","React","OHIFCornerstoneRTViewport","props","fallback","getViewportModule","component","_extends","getSopClassHandlerModule"],"sourceRoot":""}