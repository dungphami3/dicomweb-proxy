{"version":3,"file":"973.bundle.e29e9ae5425bde8e2efd.js","mappings":"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","sources":["webpack:///../../../modes/microscopy/src/id.js","webpack:///../../../modes/microscopy/src/toolbarButtons.js","webpack:///../../../modes/microscopy/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","// TODO: torn, can either bake this here; or have to create a whole new button type\r\n/**\r\n *\r\n * @param {*} type - 'tool' | 'action' | 'toggle'\r\n * @param {*} id\r\n * @param {*} icon\r\n * @param {*} label\r\n */\r\nfunction _createButton(type, id, icon, label, commands, tooltip) {\r\n  return {\r\n    id,\r\n    icon,\r\n    label,\r\n    type,\r\n    commands,\r\n    tooltip,\r\n  };\r\n}\r\n\r\nconst _createActionButton = _createButton.bind(null, 'action');\r\nconst _createToggleButton = _createButton.bind(null, 'toggle');\r\nconst _createToolButton = _createButton.bind(null, 'tool');\r\n\r\nconst toolbarButtons = [\r\n  // Measurement\r\n  {\r\n    id: 'MeasurementTools',\r\n    type: 'ohif.splitButton',\r\n    props: {\r\n      groupId: 'MeasurementTools',\r\n      isRadio: true, // ?\r\n      // Switch?\r\n      primary: _createToolButton(\r\n        'line',\r\n        'tool-length',\r\n        'Line',\r\n        [\r\n          {\r\n            commandName: 'setToolActive',\r\n            commandOptions: {\r\n              toolName: 'line',\r\n            },\r\n            context: 'MICROSCOPY',\r\n          },\r\n        ],\r\n        'Line'\r\n      ),\r\n      secondary: {\r\n        icon: 'chevron-down',\r\n        label: '',\r\n        isActive: true,\r\n        tooltip: 'More Measure Tools',\r\n      },\r\n      items: [\r\n        _createToolButton(\r\n          'line',\r\n          'tool-length',\r\n          'Line',\r\n          [\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: 'line',\r\n              },\r\n              context: 'MICROSCOPY',\r\n            },\r\n          ],\r\n          'Line Tool'\r\n        ),\r\n        _createToolButton(\r\n          'point',\r\n          'tool-point',\r\n          'Point',\r\n          [\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: 'point',\r\n              },\r\n              context: 'MICROSCOPY',\r\n            },\r\n          ],\r\n          'Point Tool'\r\n        ),\r\n        _createToolButton(\r\n          'polygon',\r\n          'tool-polygon',\r\n          'Polygon',\r\n          [\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: 'polygon',\r\n              },\r\n              context: 'MICROSCOPY',\r\n            },\r\n          ],\r\n          'Polygon Tool'\r\n        ),\r\n        _createToolButton(\r\n          'circle',\r\n          'tool-circle',\r\n          'Circle',\r\n          [\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: 'circle',\r\n              },\r\n              context: 'MICROSCOPY',\r\n            },\r\n          ],\r\n          'Circle Tool'\r\n        ),\r\n        _createToolButton(\r\n          'box',\r\n          'tool-rectangle',\r\n          'Box',\r\n          [\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: 'box',\r\n              },\r\n              context: 'MICROSCOPY',\r\n            },\r\n          ],\r\n          'Box Tool'\r\n        ),\r\n        _createToolButton(\r\n          'freehandpolygon',\r\n          'tool-freehand-polygon',\r\n          'Freehand Polygon',\r\n          [\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: 'freehandpolygon',\r\n              },\r\n              context: 'MICROSCOPY',\r\n            },\r\n          ],\r\n          'Freehand Polygon Tool'\r\n        ),\r\n        _createToolButton(\r\n          'freehandline',\r\n          'tool-freehand-line',\r\n          'Freehand Line',\r\n          [\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: 'freehandline',\r\n              },\r\n              context: 'MICROSCOPY',\r\n            },\r\n          ],\r\n          'Freehand Line Tool'\r\n        ),\r\n      ],\r\n    },\r\n  },\r\n  // Pan...\r\n  {\r\n    id: 'dragPan',\r\n    type: 'ohif.radioGroup',\r\n    props: {\r\n      type: 'tool',\r\n      icon: 'tool-move',\r\n      label: 'Pan',\r\n      commands: [\r\n        {\r\n          commandName: 'setToolActive',\r\n          commandOptions: {\r\n            toolName: 'dragPan',\r\n          },\r\n          context: 'MICROSCOPY',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n];\r\n\r\nexport default toolbarButtons;\r\n","import { hotkeys } from '@ohif/core';\r\n\r\nimport { id } from './id';\r\nimport toolbarButtons from './toolbarButtons';\r\n\r\nconst ohif = {\r\n  layout: '@ohif/extension-default.layoutTemplateModule.viewerLayout',\r\n  sopClassHandler: '@ohif/extension-default.sopClassHandlerModule.stack',\r\n  hangingProtocols: '@ohif/extension-default.hangingProtocolModule.default',\r\n  leftPanel: '@ohif/extension-default.panelModule.seriesList',\r\n  rightPanel: '@ohif/extension-default.panelModule.measure',\r\n};\r\n\r\nexport const cornerstone = {\r\n  viewport: '@ohif/extension-cornerstone.viewportModule.cornerstone',\r\n};\r\n\r\nconst dicomvideo = {\r\n  sopClassHandler:\r\n    '@ohif/extension-dicom-video.sopClassHandlerModule.dicom-video',\r\n  viewport: '@ohif/extension-dicom-video.viewportModule.dicom-video',\r\n};\r\n\r\nconst dicompdf = {\r\n  sopClassHandler: '@ohif/extension-dicom-pdf.sopClassHandlerModule.dicom-pdf',\r\n  viewport: '@ohif/extension-dicom-pdf.viewportModule.dicom-pdf',\r\n};\r\n\r\nconst extensionDependencies = {\r\n  // Can derive the versions at least process.env.from npm_package_version\r\n  '@ohif/extension-default': '^3.0.0',\r\n  '@ohif/extension-cornerstone': '^3.0.0',\r\n  '@ohif/extension-cornerstone-dicom-sr': '^3.0.0',\r\n  '@ohif/extension-dicom-pdf': '^3.0.1',\r\n  '@ohif/extension-dicom-video': '^3.0.1',\r\n  '@ohif/extension-dicom-microscopy': '^3.0.0',\r\n};\r\n\r\nfunction modeFactory() {\r\n  return {\r\n    // TODO: We're using this as a route segment\r\n    // We should not be.\r\n    id,\r\n    routeName: 'microscopy',\r\n    displayName: 'Microscopy',\r\n\r\n    /**\r\n     * Lifecycle hooks\r\n     */\r\n    onModeEnter: ({ servicesManager, extensionManager, commandsManager }) => {\r\n      const { toolbarService } = servicesManager.services;\r\n\r\n      toolbarService.init(extensionManager);\r\n      toolbarService.addButtons(toolbarButtons);\r\n      toolbarService.createButtonSection('primary', [\r\n        'MeasurementTools',\r\n        'dragPan',\r\n      ]);\r\n    },\r\n\r\n    onModeExit: ({ servicesManager }) => {\r\n      const { toolbarService } = servicesManager.services;\r\n\r\n      toolbarService.reset();\r\n    },\r\n\r\n    validationTags: {\r\n      study: [],\r\n      series: [],\r\n    },\r\n\r\n    isValidMode: ({ modalities }) => {\r\n      const modalities_list = modalities.split('\\\\');\r\n\r\n      // Slide Microscopy and ECG modality not supported by basic mode yet\r\n      return modalities_list.includes('SM');\r\n    },\r\n\r\n    routes: [\r\n      {\r\n        path: 'microscopy',\r\n        /*init: ({ servicesManager, extensionManager }) => {\r\n          //defaultViewerRouteInit\r\n        },*/\r\n        layoutTemplate: ({ location, servicesManager }) => {\r\n          return {\r\n            id: ohif.layout,\r\n            props: {\r\n              leftPanels: [ohif.leftPanel],\r\n              leftPanelDefaultClosed: true, // we have problem with rendering thumbnails for microscopy images\r\n              rightPanelDefaultClosed: true, // we do not have the save microscopy measurements yet\r\n              rightPanels: [\r\n                '@ohif/extension-dicom-microscopy.panelModule.measure',\r\n              ],\r\n              viewports: [\r\n                {\r\n                  namespace:\r\n                    '@ohif/extension-dicom-microscopy.viewportModule.microscopy-dicom',\r\n                  displaySetsToDisplay: [\r\n                    '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySopClassHandler',\r\n                    '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler',\r\n                  ],\r\n                },\r\n                {\r\n                  namespace: dicomvideo.viewport,\r\n                  displaySetsToDisplay: [dicomvideo.sopClassHandler],\r\n                },\r\n                {\r\n                  namespace: dicompdf.viewport,\r\n                  displaySetsToDisplay: [dicompdf.sopClassHandler],\r\n                },\r\n              ],\r\n            },\r\n          };\r\n        },\r\n      },\r\n    ],\r\n    extensions: extensionDependencies,\r\n    hangingProtocols: [ohif.hangingProtocols],\r\n    hangingProtocol: ['default'],\r\n\r\n    // Order is important in sop class handlers when two handlers both use\r\n    // the same sop class under different situations.  In that case, the more\r\n    // general handler needs to come last.  For this case, the dicomvideo must\r\n    // come first to remove video transfer syntax before ohif uses images\r\n    sopClassHandlers: [\r\n      '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySopClassHandler',\r\n      '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler',\r\n      dicomvideo.sopClassHandler,\r\n      dicompdf.sopClassHandler,\r\n    ],\r\n    hotkeys: [...hotkeys.defaults.hotkeyBindings],\r\n  };\r\n}\r\n\r\nconst mode = {\r\n  id,\r\n  modeFactory,\r\n  extensionDependencies,\r\n};\r\n\r\nexport default mode;\r\n"],"names":["id","packageJson","_createButton","type","icon","label","commands","tooltip","bind","_createToolButton","props","groupId","isRadio","primary","commandName","commandOptions","toolName","context","secondary","isActive","items","ohif","cornerstone","viewport","dicomvideo","dicompdf","extensionDependencies","modeFactory","routeName","displayName","onModeEnter","_ref","servicesManager","extensionManager","commandsManager","toolbarService","services","init","addButtons","toolbarButtons","createButtonSection","onModeExit","_ref2","reset","validationTags","study","series","isValidMode","_ref3","modalities","split","includes","routes","path","layoutTemplate","_ref4","location","leftPanels","leftPanelDefaultClosed","rightPanelDefaultClosed","rightPanels","viewports","namespace","displaySetsToDisplay","extensions","hangingProtocols","hangingProtocol","sopClassHandlers","hotkeys","defaults","hotkeyBindings"],"sourceRoot":""}