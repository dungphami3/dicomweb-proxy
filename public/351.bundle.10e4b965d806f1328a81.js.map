{"version":3,"file":"351.bundle.10e4b965d806f1328a81.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageScrollbar.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/utils.ts","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CustomizableViewportOverlay.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageSliceLoadingIndicator.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CornerstoneOverlays.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Enums, Types, utilities } from '@cornerstonejs/core';\r\nimport { utilities as csToolsUtils } from '@cornerstonejs/tools';\r\nimport { ImageScrollbar } from '@ohif/ui';\r\nimport { ServicesManger } from '@ohif/core';\r\n\r\nfunction CornerstoneImageScrollbar({\r\n  viewportData,\r\n  viewportIndex,\r\n  element,\r\n  imageSliceData,\r\n  setImageSliceData,\r\n  scrollbarHeight,\r\n  servicesManager,\r\n}) {\r\n  const {\r\n    cineService,\r\n    cornerstoneViewportService,\r\n  } = (servicesManager as ServicesManger).services;\r\n\r\n  const onImageScrollbarChange = (imageIndex, viewportIndex) => {\r\n    const viewportInfo = cornerstoneViewportService.getViewportInfoByIndex(\r\n      viewportIndex\r\n    );\r\n\r\n    const viewportId = viewportInfo.getViewportId();\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(\r\n      viewportId\r\n    );\r\n\r\n    const { isCineEnabled } = cineService.getState();\r\n\r\n    if (isCineEnabled) {\r\n      // on image scrollbar change, stop the CINE if it is playing\r\n      cineService.stopClip(element);\r\n      cineService.setCine({ id: viewportIndex, isPlaying: false });\r\n    }\r\n\r\n    csToolsUtils.jumpToSlice(viewport.element, {\r\n      imageIndex,\r\n      debounceLoading: true,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!viewportData) {\r\n      return;\r\n    }\r\n\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(\r\n      viewportIndex\r\n    );\r\n\r\n    if (!viewport) {\r\n      return;\r\n    }\r\n\r\n    if (viewportData.viewportType === Enums.ViewportType.STACK) {\r\n      const imageIndex = viewport.getCurrentImageIdIndex();\r\n\r\n      setImageSliceData({\r\n        imageIndex: imageIndex,\r\n        numberOfSlices: viewportData.data.imageIds.length,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    if (viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC) {\r\n      const sliceData = utilities.getImageSliceDataForVolumeViewport(\r\n        viewport as Types.IVolumeViewport\r\n      );\r\n\r\n      if (!sliceData) {\r\n        return;\r\n      }\r\n\r\n      const { imageIndex, numberOfSlices } = sliceData;\r\n      setImageSliceData({ imageIndex, numberOfSlices });\r\n    }\r\n  }, [viewportIndex, viewportData]);\r\n\r\n  useEffect(() => {\r\n    if (viewportData?.viewportType !== Enums.ViewportType.STACK) {\r\n      return;\r\n    }\r\n\r\n    const updateStackIndex = event => {\r\n      const { newImageIdIndex } = event.detail;\r\n      // find the index of imageId in the imageIds\r\n      setImageSliceData({\r\n        imageIndex: newImageIdIndex,\r\n        numberOfSlices: viewportData.data.imageIds.length,\r\n      });\r\n    };\r\n\r\n    element.addEventListener(\r\n      Enums.Events.STACK_VIEWPORT_SCROLL,\r\n      updateStackIndex\r\n    );\r\n\r\n    return () => {\r\n      element.removeEventListener(\r\n        Enums.Events.STACK_VIEWPORT_SCROLL,\r\n        updateStackIndex\r\n      );\r\n    };\r\n  }, [viewportData, element]);\r\n\r\n  useEffect(() => {\r\n    if (viewportData?.viewportType !== Enums.ViewportType.ORTHOGRAPHIC) {\r\n      return;\r\n    }\r\n\r\n    const updateVolumeIndex = event => {\r\n      const { imageIndex, numberOfSlices } = event.detail;\r\n      // find the index of imageId in the imageIds\r\n      setImageSliceData({ imageIndex, numberOfSlices });\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.VOLUME_NEW_IMAGE, updateVolumeIndex);\r\n\r\n    return () => {\r\n      element.removeEventListener(\r\n        Enums.Events.VOLUME_NEW_IMAGE,\r\n        updateVolumeIndex\r\n      );\r\n    };\r\n  }, [viewportData, element]);\r\n\r\n  return (\r\n    <ImageScrollbar\r\n      onChange={evt => onImageScrollbarChange(evt, viewportIndex)}\r\n      max={\r\n        imageSliceData.numberOfSlices ? imageSliceData.numberOfSlices - 1 : 0\r\n      }\r\n      height={scrollbarHeight}\r\n      value={imageSliceData.imageIndex}\r\n    />\r\n  );\r\n}\r\n\r\nCornerstoneImageScrollbar.propTypes = {\r\n  viewportData: PropTypes.object,\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  element: PropTypes.instanceOf(Element),\r\n  scrollbarHeight: PropTypes.string,\r\n  imageSliceData: PropTypes.object.isRequired,\r\n  setImageSliceData: PropTypes.func.isRequired,\r\n  servicesManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CornerstoneImageScrollbar;\r\n","import moment from 'moment';\r\nimport { metaData } from '@cornerstonejs/core';\r\n\r\n/**\r\n * Checks if value is valid.\r\n *\r\n * @param {number} value\r\n * @returns {boolean} is valid.\r\n */\r\nexport function isValidNumber(value) {\r\n  return typeof value === 'number' && !isNaN(value);\r\n}\r\n\r\n/**\r\n * Formats number precision.\r\n *\r\n * @param {number} number\r\n * @param {number} precision\r\n * @returns {number} formatted number.\r\n */\r\nexport function formatNumberPrecision(number, precision = 0) {\r\n  if (number !== null) {\r\n    return parseFloat(number).toFixed(precision);\r\n  }\r\n}\r\n\r\n/**\r\n * Formats DICOM date.\r\n *\r\n * @param {string} date\r\n * @param {string} strFormat\r\n * @returns {string} formatted date.\r\n */\r\nexport function formatDICOMDate(date, strFormat = 'MMM D, YYYY') {\r\n  return moment(date, 'YYYYMMDD').format(strFormat);\r\n}\r\n\r\n/**\r\n *    DICOM Time is stored as HHmmss.SSS, where:\r\n *      HH 24 hour time:\r\n *        m mm        0..59   Minutes\r\n *        s ss        0..59   Seconds\r\n *        S SS SSS    0..999  Fractional seconds\r\n *\r\n *        Goal: '24:12:12'\r\n *\r\n * @param {*} time\r\n * @param {string} strFormat\r\n * @returns {string} formatted name.\r\n */\r\nexport function formatDICOMTime(time, strFormat = 'HH:mm:ss') {\r\n  return moment(time, 'HH:mm:ss').format(strFormat);\r\n}\r\n\r\n/**\r\n * Formats a patient name for display purposes\r\n *\r\n * @param {string} name\r\n * @returns {string} formatted name.\r\n */\r\nexport function formatPN(name) {\r\n  if (!name) {\r\n    return '';\r\n  }\r\n\r\n  const cleaned = name\r\n    .split('^')\r\n    .filter(s => !!s)\r\n    .join(', ')\r\n    .trim();\r\n  return cleaned === ',' || cleaned === '' ? '' : cleaned;\r\n}\r\n\r\n/**\r\n * Gets compression type\r\n *\r\n * @param {number} imageId\r\n * @returns {string} comrpession type.\r\n */\r\nexport function getCompression(imageId) {\r\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\r\n  const {\r\n    lossyImageCompression,\r\n    lossyImageCompressionRatio,\r\n    lossyImageCompressionMethod,\r\n  } = generalImageModule;\r\n\r\n  if (lossyImageCompression === '01' && lossyImageCompressionRatio !== '') {\r\n    const compressionMethod = lossyImageCompressionMethod || 'Lossy: ';\r\n    const compressionRatio = formatNumberPrecision(\r\n      lossyImageCompressionRatio,\r\n      2\r\n    );\r\n    return compressionMethod + compressionRatio + ' : 1';\r\n  }\r\n\r\n  return 'Lossless / Uncompressed';\r\n}\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport PropTypes from 'prop-types';\r\nimport { metaData, Enums, utilities } from '@cornerstonejs/core';\r\nimport { ViewportOverlay } from '@ohif/ui';\r\nimport {\r\n  formatPN,\r\n  formatDICOMDate,\r\n  formatDICOMTime,\r\n  formatNumberPrecision,\r\n} from './utils';\r\nimport { InstanceMetadata } from 'platform/core/src/types';\r\nimport { ServicesManager } from '@ohif/core';\r\nimport { ImageSliceData } from '@cornerstonejs/core/dist/esm/types';\r\n\r\nimport './CustomizableViewportOverlay.css';\r\n\r\nconst EPSILON = 1e-4;\r\n\r\ninterface OverlayItemProps {\r\n  element: any;\r\n  viewportData: any;\r\n  imageSliceData: ImageSliceData;\r\n  viewportIndex: number | null;\r\n  servicesManager: ServicesManager;\r\n  instance: InstanceMetadata;\r\n  customization: any;\r\n  formatters: {\r\n    formatPN: (val) => string;\r\n    formatDate: (val) => string;\r\n    formatTime: (val) => string;\r\n    formatNumberPrecision: (val, number) => string;\r\n  };\r\n\r\n  // calculated values\r\n  voi: {\r\n    windowWidth: number;\r\n    windowCenter: number;\r\n  };\r\n  instanceNumber?: number;\r\n  scale?: number;\r\n}\r\n\r\n/**\r\n * Window Level / Center Overlay item\r\n */\r\nfunction VOIOverlayItem({ voi, customization }: OverlayItemProps) {\r\n  const { windowWidth, windowCenter } = voi;\r\n  if (typeof windowCenter !== 'number' || typeof windowWidth !== 'number') {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color: (customization && customization.color) || undefined }}\r\n    >\r\n      <span className=\"mr-1 shrink-0\">W:</span>\r\n      <span className=\"ml-1 mr-2 font-light shrink-0\">\r\n        {windowWidth.toFixed(0)}\r\n      </span>\r\n      <span className=\"mr-1 shrink-0\">L:</span>\r\n      <span className=\"ml-1 font-light shrink-0\">\r\n        {windowCenter.toFixed(0)}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Zoom Level Overlay item\r\n */\r\nfunction ZoomOverlayItem({ scale, customization }: OverlayItemProps) {\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color: (customization && customization.color) || undefined }}\r\n    >\r\n      <span className=\"mr-1 shrink-0\">Zoom:</span>\r\n      <span className=\"font-light\">{scale.toFixed(2)}x</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Instance Number Overlay Item\r\n */\r\nfunction InstanceNumberOverlayItem({\r\n  instanceNumber,\r\n  imageSliceData,\r\n  customization,\r\n}: OverlayItemProps) {\r\n  const { imageIndex, numberOfSlices } = imageSliceData;\r\n\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color: (customization && customization.color) || undefined }}\r\n    >\r\n      <span className=\"mr-1 shrink-0\">I:</span>\r\n      <span className=\"font-light\">\r\n        {instanceNumber !== undefined && instanceNumber !== null\r\n          ? `${instanceNumber} (${imageIndex + 1}/${numberOfSlices})`\r\n          : `${imageIndex + 1}/${numberOfSlices}`}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Customizable Viewport Overlay\r\n */\r\nfunction CustomizableViewportOverlay({\r\n  element,\r\n  viewportData,\r\n  imageSliceData,\r\n  viewportIndex,\r\n  servicesManager,\r\n}) {\r\n  const {\r\n    toolbarService,\r\n    cornerstoneViewportService,\r\n    customizationService,\r\n  } = servicesManager.services;\r\n  const [voi, setVOI] = useState({ windowCenter: null, windowWidth: null });\r\n  const [scale, setScale] = useState(1);\r\n  const [activeTools, setActiveTools] = useState([]);\r\n  const { imageIndex } = imageSliceData;\r\n\r\n  const topLeftCustomization = customizationService.getModeCustomization(\r\n    'cornerstoneOverlayTopLeft'\r\n  );\r\n  const topRightCustomization = customizationService.getModeCustomization(\r\n    'cornerstoneOverlayTopRight'\r\n  );\r\n  const bottomLeftCustomization = customizationService.getModeCustomization(\r\n    'cornerstoneOverlayBottomLeft'\r\n  );\r\n  const bottomRightCustomization = customizationService.getModeCustomization(\r\n    'cornerstoneOverlayBottomRight'\r\n  );\r\n\r\n  const instance = useMemo(() => {\r\n    if (viewportData != null) {\r\n      return _getViewportInstance(viewportData, imageIndex);\r\n    } else {\r\n      return null;\r\n    }\r\n  }, [viewportData, imageIndex]);\r\n\r\n  const instanceNumber = useMemo(() => {\r\n    if (viewportData != null) {\r\n      return _getInstanceNumber(\r\n        viewportData,\r\n        viewportIndex,\r\n        imageIndex,\r\n        cornerstoneViewportService\r\n      );\r\n    }\r\n    return null;\r\n  }, [viewportData, viewportIndex, imageIndex, cornerstoneViewportService]);\r\n\r\n  /**\r\n   * Initial toolbar state\r\n   */\r\n  useEffect(() => {\r\n    setActiveTools(toolbarService.getActiveTools());\r\n  }, []);\r\n\r\n  /**\r\n   * Updating the VOI when the viewport changes its voi\r\n   */\r\n  useEffect(() => {\r\n    const updateVOI = eventDetail => {\r\n      const { range } = eventDetail.detail;\r\n\r\n      if (!range) {\r\n        return;\r\n      }\r\n\r\n      const { lower, upper } = range;\r\n      const { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(\r\n        lower,\r\n        upper\r\n      );\r\n\r\n      setVOI({ windowCenter, windowWidth });\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\r\n    };\r\n  }, [viewportIndex, viewportData, voi, element]);\r\n\r\n  /**\r\n   * Updating the scale when the viewport changes its zoom\r\n   */\r\n  useEffect(() => {\r\n    const updateScale = eventDetail => {\r\n      const { previousCamera, camera } = eventDetail.detail;\r\n\r\n      if (\r\n        previousCamera.parallelScale !== camera.parallelScale ||\r\n        previousCamera.scale !== camera.scale\r\n      ) {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(\r\n          viewportIndex\r\n        );\r\n\r\n        if (!viewport) {\r\n          return;\r\n        }\r\n\r\n        const imageData = viewport.getImageData();\r\n\r\n        if (!imageData) {\r\n          return;\r\n        }\r\n\r\n        if (camera.scale) {\r\n          setScale(camera.scale);\r\n          return;\r\n        }\r\n\r\n        const { spacing } = imageData;\r\n        // convert parallel scale to scale\r\n        const scale =\r\n          (element.clientHeight * spacing[0] * 0.5) / camera.parallelScale;\r\n        setScale(scale);\r\n      }\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, updateScale);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, updateScale);\r\n    };\r\n  }, [viewportIndex, viewportData, cornerstoneViewportService, element]);\r\n\r\n  /**\r\n   * Updating the active tools when the toolbar changes\r\n   */\r\n  // Todo: this should act on the toolGroups instead of the toolbar state\r\n  useEffect(() => {\r\n    const { unsubscribe } = toolbarService.subscribe(\r\n      toolbarService.EVENTS.TOOL_BAR_STATE_MODIFIED,\r\n      () => {\r\n        setActiveTools(toolbarService.getActiveTools());\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [toolbarService]);\r\n\r\n  const _renderOverlayItem = useCallback(\r\n    item => {\r\n      const overlayItemProps: OverlayItemProps = {\r\n        element,\r\n        viewportData,\r\n        imageSliceData,\r\n        viewportIndex,\r\n        servicesManager,\r\n        customization: item,\r\n        formatters: {\r\n          formatPN: formatPN,\r\n          formatDate: formatDICOMDate,\r\n          formatTime: formatDICOMTime,\r\n          formatNumberPrecision: formatNumberPrecision,\r\n        },\r\n        instance,\r\n        // calculated\r\n        voi,\r\n        scale,\r\n        instanceNumber,\r\n      };\r\n\r\n      if (item.customizationType === 'ohif.overlayItem.windowLevel') {\r\n        return <VOIOverlayItem {...overlayItemProps} />;\r\n      } else if (item.customizationType === 'ohif.overlayItem.zoomLevel') {\r\n        return <ZoomOverlayItem {...overlayItemProps} />;\r\n      } else if (item.customizationType === 'ohif.overlayItem.instanceNumber') {\r\n        return <InstanceNumberOverlayItem {...overlayItemProps} />;\r\n      } else {\r\n        const renderItem = customizationService.transform(item);\r\n\r\n        if (typeof renderItem.content === 'function') {\r\n          return renderItem.content(overlayItemProps);\r\n        }\r\n      }\r\n    },\r\n    [\r\n      element,\r\n      viewportData,\r\n      imageSliceData,\r\n      viewportIndex,\r\n      servicesManager,\r\n      customizationService,\r\n      instance,\r\n      voi,\r\n      scale,\r\n      instanceNumber,\r\n    ]\r\n  );\r\n\r\n  const getTopLeftContent = useCallback(() => {\r\n    const items = topLeftCustomization?.items || [\r\n      {\r\n        id: 'WindowLevel',\r\n        customizationType: 'ohif.overlayItem.windowLevel',\r\n      },\r\n    ];\r\n    return (\r\n      <>\r\n        {items.map((item, i) => (\r\n          <div key={`topLeftOverlayItem_${i}`}>{_renderOverlayItem(item)}</div>\r\n        ))}\r\n      </>\r\n    );\r\n  }, [topLeftCustomization, _renderOverlayItem]);\r\n\r\n  const getTopRightContent = useCallback(() => {\r\n    const items = topRightCustomization?.items || [\r\n      {\r\n        id: 'InstanceNmber',\r\n        customizationType: 'ohif.overlayItem.instanceNumber',\r\n      },\r\n    ];\r\n    return (\r\n      <>\r\n        {items.map((item, i) => (\r\n          <div key={`topRightOverlayItem_${i}`}>{_renderOverlayItem(item)}</div>\r\n        ))}\r\n      </>\r\n    );\r\n  }, [topRightCustomization, _renderOverlayItem]);\r\n\r\n  const getBottomLeftContent = useCallback(() => {\r\n    const items = bottomLeftCustomization?.items || [];\r\n    return (\r\n      <>\r\n        {items.map((item, i) => (\r\n          <div key={`bottomLeftOverlayItem_${i}`}>\r\n            {_renderOverlayItem(item)}\r\n          </div>\r\n        ))}\r\n      </>\r\n    );\r\n  }, [bottomLeftCustomization, _renderOverlayItem]);\r\n\r\n  const getBottomRightContent = useCallback(() => {\r\n    const items = bottomRightCustomization?.items || [];\r\n    return (\r\n      <>\r\n        {items.map((item, i) => (\r\n          <div key={`bottomRightOverlayItem_${i}`}>\r\n            {_renderOverlayItem(item)}\r\n          </div>\r\n        ))}\r\n      </>\r\n    );\r\n  }, [bottomRightCustomization, _renderOverlayItem]);\r\n\r\n  return (\r\n    <ViewportOverlay\r\n      topLeft={getTopLeftContent()}\r\n      topRight={getTopRightContent()}\r\n      bottomLeft={getBottomLeftContent()}\r\n      bottomRight={getBottomRightContent()}\r\n    />\r\n  );\r\n}\r\n\r\nfunction _getViewportInstance(viewportData, imageIndex) {\r\n  let imageId = null;\r\n  if (viewportData.viewportType === Enums.ViewportType.STACK) {\r\n    imageId = viewportData.data.imageIds[imageIndex];\r\n  } else if (viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC) {\r\n    const volumes = viewportData.data;\r\n    if (volumes && volumes.length == 1) {\r\n      const volume = volumes[0];\r\n      imageId = volume.imageIds[imageIndex];\r\n    }\r\n  }\r\n  return imageId ? metaData.get('instance', imageId) || {} : {};\r\n}\r\n\r\nfunction _getInstanceNumber(\r\n  viewportData,\r\n  viewportIndex,\r\n  imageIndex,\r\n  cornerstoneViewportService\r\n) {\r\n  let instanceNumber;\r\n\r\n  if (viewportData.viewportType === Enums.ViewportType.STACK) {\r\n    instanceNumber = _getInstanceNumberFromStack(viewportData, imageIndex);\r\n\r\n    if (!instanceNumber && instanceNumber !== 0) {\r\n      return null;\r\n    }\r\n  } else if (viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC) {\r\n    instanceNumber = _getInstanceNumberFromVolume(\r\n      viewportData,\r\n      imageIndex,\r\n      viewportIndex,\r\n      cornerstoneViewportService\r\n    );\r\n  }\r\n  return instanceNumber;\r\n}\r\n\r\nfunction _getInstanceNumberFromStack(viewportData, imageIndex) {\r\n  const imageIds = viewportData.data.imageIds;\r\n  const imageId = imageIds[imageIndex];\r\n\r\n  if (!imageId) {\r\n    return;\r\n  }\r\n\r\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\r\n  const { instanceNumber } = generalImageModule;\r\n\r\n  const stackSize = imageIds.length;\r\n\r\n  if (stackSize <= 1) {\r\n    return;\r\n  }\r\n\r\n  return parseInt(instanceNumber);\r\n}\r\n\r\n// Since volume viewports can be in any view direction, they can render\r\n// a reconstructed image which don't have imageIds; therefore, no instance and instanceNumber\r\n// Here we check if viewport is in the acquisition direction and if so, we get the instanceNumber\r\nfunction _getInstanceNumberFromVolume(\r\n  viewportData,\r\n  imageIndex,\r\n  viewportIndex,\r\n  cornerstoneViewportService\r\n) {\r\n  const volumes = viewportData.volumes;\r\n\r\n  // Todo: support fusion of acquisition plane which has instanceNumber\r\n  if (!volumes || volumes.length > 1) {\r\n    return;\r\n  }\r\n\r\n  const volume = volumes[0];\r\n  const { direction, imageIds } = volume;\r\n\r\n  const cornerstoneViewport = cornerstoneViewportService.getCornerstoneViewportByIndex(\r\n    viewportIndex\r\n  );\r\n\r\n  if (!cornerstoneViewport) {\r\n    return;\r\n  }\r\n\r\n  const camera = cornerstoneViewport.getCamera();\r\n  const { viewPlaneNormal } = camera;\r\n  // checking if camera is looking at the acquisition plane (defined by the direction on the volume)\r\n\r\n  const scanAxisNormal = direction.slice(6, 9);\r\n\r\n  // check if viewPlaneNormal is parallel to scanAxisNormal\r\n  const cross = vec3.cross(vec3.create(), viewPlaneNormal, scanAxisNormal);\r\n  const isAcquisitionPlane = vec3.length(cross) < EPSILON;\r\n\r\n  if (isAcquisitionPlane) {\r\n    const imageId = imageIds[imageIndex];\r\n\r\n    if (!imageId) {\r\n      return {};\r\n    }\r\n\r\n    const { instanceNumber } =\r\n      metaData.get('generalImageModule', imageId) || {};\r\n    return parseInt(instanceNumber);\r\n  }\r\n}\r\n\r\nCustomizableViewportOverlay.propTypes = {\r\n  viewportData: PropTypes.object,\r\n  imageIndex: PropTypes.number,\r\n  viewportIndex: PropTypes.number,\r\n};\r\n\r\nexport default CustomizableViewportOverlay;\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport classNames from 'classnames';\r\nimport {\r\n  metaData,\r\n  Enums,\r\n  Types,\r\n  getEnabledElement,\r\n  utilities as csUtils,\r\n} from '@cornerstonejs/core';\r\nimport { utilities } from '@cornerstonejs/tools';\r\nimport PropTypes from 'prop-types';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport './ViewportOrientationMarkers.css';\r\n\r\nconst {\r\n  getOrientationStringLPS,\r\n  invertOrientationStringLPS,\r\n} = utilities.orientation;\r\n\r\nfunction ViewportOrientationMarkers({\r\n  element,\r\n  viewportData,\r\n  imageSliceData,\r\n  viewportIndex,\r\n  servicesManager,\r\n  orientationMarkers = ['top', 'left'],\r\n}) {\r\n  // Rotation is in degrees\r\n  const [rotation, setRotation] = useState(0);\r\n  const [flipHorizontal, setFlipHorizontal] = useState(false);\r\n  const [flipVertical, setFlipVertical] = useState(false);\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n\r\n  useEffect(() => {\r\n    const cameraModifiedListener = (\r\n      evt: Types.EventTypes.CameraModifiedEvent\r\n    ) => {\r\n      const { rotation, previousCamera, camera } = evt.detail;\r\n\r\n      if (rotation !== undefined) {\r\n        setRotation(rotation);\r\n      }\r\n\r\n      if (\r\n        camera.flipHorizontal !== undefined &&\r\n        previousCamera.flipHorizontal !== camera.flipHorizontal\r\n      ) {\r\n        setFlipHorizontal(camera.flipHorizontal);\r\n      }\r\n\r\n      if (\r\n        camera.flipVertical !== undefined &&\r\n        previousCamera.flipVertical !== camera.flipVertical\r\n      ) {\r\n        setFlipVertical(camera.flipVertical);\r\n      }\r\n    };\r\n\r\n    element.addEventListener(\r\n      Enums.Events.CAMERA_MODIFIED,\r\n      cameraModifiedListener\r\n    );\r\n\r\n    return () => {\r\n      element.removeEventListener(\r\n        Enums.Events.CAMERA_MODIFIED,\r\n        cameraModifiedListener\r\n      );\r\n    };\r\n  }, []);\r\n\r\n  const markers = useMemo(() => {\r\n    if (!viewportData) {\r\n      return '';\r\n    }\r\n\r\n    let rowCosines, columnCosines;\r\n    if (viewportData.viewportType === 'stack') {\r\n      const imageIndex = imageSliceData.imageIndex;\r\n      const imageId = viewportData.data.imageIds?.[imageIndex];\r\n\r\n      // Workaround for below TODO stub\r\n      if (!imageId) {\r\n        return false;\r\n      }\r\n\r\n      ({ rowCosines, columnCosines } =\r\n        metaData.get('imagePlaneModule', imageId) || {});\r\n    } else {\r\n      if (!element || !getEnabledElement(element)) {\r\n        return '';\r\n      }\r\n\r\n      const { viewport } = getEnabledElement(element);\r\n      const { viewUp, viewPlaneNormal } = viewport.getCamera();\r\n\r\n      const viewRight = vec3.create();\r\n      vec3.cross(viewRight, viewUp, viewPlaneNormal);\r\n\r\n      columnCosines = [-viewUp[0], -viewUp[1], -viewUp[2]];\r\n      rowCosines = viewRight;\r\n    }\r\n\r\n    if (!rowCosines || !columnCosines || rotation === undefined) {\r\n      return '';\r\n    }\r\n\r\n    const markers = _getOrientationMarkers(\r\n      rowCosines,\r\n      columnCosines,\r\n      rotation,\r\n      flipVertical,\r\n      flipHorizontal\r\n    );\r\n\r\n    const ohifViewport = cornerstoneViewportService.getViewportInfoByIndex(\r\n      viewportIndex\r\n    );\r\n\r\n    if (!ohifViewport) {\r\n      console.log('ViewportOrientationMarkers::No viewport');\r\n      return null;\r\n    }\r\n    const backgroundColor = ohifViewport.getViewportOptions().background;\r\n\r\n    // Todo: probably this can be done in a better way in which we identify bright\r\n    // background\r\n    const isLight = backgroundColor\r\n      ? csUtils.isEqual(backgroundColor, [1, 1, 1])\r\n      : false;\r\n\r\n    return orientationMarkers.map((m, index) => (\r\n      <div\r\n        className={classNames(\r\n          `${m}-mid orientation-marker`,\r\n          isLight ? 'text-[#726F7E]' : 'text-[#ccc]'\r\n        )}\r\n        key={`${m}-mid orientation-marker`}\r\n      >\r\n        <div className=\"orientation-marker-value\">{markers[m]}</div>\r\n      </div>\r\n    ));\r\n  }, [\r\n    viewportData,\r\n    imageSliceData,\r\n    rotation,\r\n    flipVertical,\r\n    flipHorizontal,\r\n    orientationMarkers,\r\n    element,\r\n  ]);\r\n\r\n  return <div className=\"ViewportOrientationMarkers noselect\">{markers}</div>;\r\n}\r\n\r\nViewportOrientationMarkers.propTypes = {\r\n  percentComplete: PropTypes.number,\r\n  error: PropTypes.object,\r\n};\r\n\r\nViewportOrientationMarkers.defaultProps = {\r\n  percentComplete: 0,\r\n  error: null,\r\n};\r\n\r\n/**\r\n *\r\n * Computes the orientation labels on a Cornerstone-enabled Viewport element\r\n * when the viewport settings change (e.g. when a horizontal flip or a rotation occurs)\r\n *\r\n * @param {*} rowCosines\r\n * @param {*} columnCosines\r\n * @param {*} rotation in degrees\r\n * @returns\r\n */\r\nfunction _getOrientationMarkers(\r\n  rowCosines,\r\n  columnCosines,\r\n  rotation,\r\n  flipVertical,\r\n  flipHorizontal\r\n) {\r\n  const rowString = getOrientationStringLPS(rowCosines);\r\n  const columnString = getOrientationStringLPS(columnCosines);\r\n  const oppositeRowString = invertOrientationStringLPS(rowString);\r\n  const oppositeColumnString = invertOrientationStringLPS(columnString);\r\n\r\n  const markers = {\r\n    top: oppositeColumnString,\r\n    left: oppositeRowString,\r\n    right: rowString,\r\n    bottom: columnString,\r\n  };\r\n\r\n  // If any vertical or horizontal flips are applied, change the orientation strings ahead of\r\n  // the rotation applications\r\n  if (flipVertical) {\r\n    markers.top = invertOrientationStringLPS(markers.top);\r\n    markers.bottom = invertOrientationStringLPS(markers.bottom);\r\n  }\r\n\r\n  if (flipHorizontal) {\r\n    markers.left = invertOrientationStringLPS(markers.left);\r\n    markers.right = invertOrientationStringLPS(markers.right);\r\n  }\r\n\r\n  // Swap the labels accordingly if the viewport has been rotated\r\n  // This could be done in a more complex way for intermediate rotation values (e.g. 45 degrees)\r\n  if (rotation === 90 || rotation === -270) {\r\n    return {\r\n      top: markers.left,\r\n      left: invertOrientationStringLPS(markers.top),\r\n      right: invertOrientationStringLPS(markers.bottom),\r\n      bottom: markers.right, // left\r\n    };\r\n  } else if (rotation === -90 || rotation === 270) {\r\n    return {\r\n      top: invertOrientationStringLPS(markers.left),\r\n      left: markers.top,\r\n      bottom: markers.left,\r\n      right: markers.bottom,\r\n    };\r\n  } else if (rotation === 180 || rotation === -180) {\r\n    return {\r\n      top: invertOrientationStringLPS(markers.top),\r\n      left: invertOrientationStringLPS(markers.left),\r\n      bottom: invertOrientationStringLPS(markers.bottom),\r\n      right: invertOrientationStringLPS(markers.right),\r\n    };\r\n  }\r\n\r\n  return markers;\r\n}\r\n\r\nexport default ViewportOrientationMarkers;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Enums } from '@cornerstonejs/core';\r\n\r\nfunction ViewportImageSliceLoadingIndicator({ viewportData, element }) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const loadIndicatorRef = useRef(null);\r\n  const imageIdToBeLoaded = useRef(null);\r\n\r\n  const setLoadingState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    loadIndicatorRef.current = setTimeout(() => {\r\n      setLoading(true);\r\n    }, 50);\r\n  };\r\n\r\n  const setFinishLoadingState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const setErrorState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    if (imageIdToBeLoaded.current === evt.detail.imageId) {\r\n      setError(evt.detail.error);\r\n      imageIdToBeLoaded.current = null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    element.addEventListener(\r\n      Enums.Events.STACK_VIEWPORT_SCROLL,\r\n      setLoadingState\r\n    );\r\n    element.addEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\r\n    element.addEventListener(\r\n      Enums.Events.STACK_NEW_IMAGE,\r\n      setFinishLoadingState\r\n    );\r\n\r\n    return () => {\r\n      element.removeEventListener(\r\n        Enums.Events.STACK_VIEWPORT_SCROLL,\r\n        setLoadingState\r\n      );\r\n\r\n      element.removeEventListener(\r\n        Enums.Events.STACK_NEW_IMAGE,\r\n        setFinishLoadingState\r\n      );\r\n\r\n      element.removeEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\r\n    };\r\n  }, [element, viewportData]);\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <div className=\"bg-black opacity-50 absolute h-full w-full top-0 left-0\">\r\n          <div className=\"flex transparent items-center justify-center w-full h-full\">\r\n            <p className=\"text-primary-light text-xl font-light\">\r\n              <h4>Error Loading Image</h4>\r\n              <p>An error has occurred.</p>\r\n              <p>{error}</p>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      // IMPORTANT: we need to use the pointer-events-none class to prevent the loading indicator from\r\n      // interacting with the mouse, since scrolling should propagate to the viewport underneath\r\n      <div className=\"pointer-events-none bg-black opacity-50 absolute h-full w-full top-0 left-0\">\r\n        <div className=\"flex transparent items-center justify-center w-full h-full\">\r\n          <p className=\"text-primary-light text-xl font-light\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nViewportImageSliceLoadingIndicator.propTypes = {\r\n  percentComplete: PropTypes.number,\r\n  error: PropTypes.object,\r\n  element: PropTypes.object,\r\n};\r\n\r\nViewportImageSliceLoadingIndicator.defaultProps = {\r\n  percentComplete: 0,\r\n  error: null,\r\n};\r\n\r\nexport default ViewportImageSliceLoadingIndicator;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport ViewportImageScrollbar from './ViewportImageScrollbar';\r\nimport CustomizableViewportOverlay from './CustomizableViewportOverlay';\r\nimport ViewportOrientationMarkers from './ViewportOrientationMarkers';\r\nimport ViewportImageSliceLoadingIndicator from './ViewportImageSliceLoadingIndicator';\r\n\r\nfunction CornerstoneOverlays(props) {\r\n  const { viewportIndex, element, scrollbarHeight, servicesManager } = props;\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const [imageSliceData, setImageSliceData] = useState({\r\n    imageIndex: 0,\r\n    numberOfSlices: 0,\r\n  });\r\n  const [viewportData, setViewportData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\r\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\r\n      props => {\r\n        if (props.viewportIndex !== viewportIndex) {\r\n          return;\r\n        }\r\n\r\n        setViewportData(props.viewportData);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [viewportIndex]);\r\n\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  if (viewportData) {\r\n    const viewportInfo =\r\n      cornerstoneViewportService.getViewportInfoByIndex(viewportIndex);\r\n\r\n    if (viewportInfo?.viewportOptions?.customViewportProps?.hideOverlays) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"noselect\">\r\n      <ViewportImageScrollbar\r\n        viewportIndex={viewportIndex}\r\n        viewportData={viewportData}\r\n        element={element}\r\n        imageSliceData={imageSliceData}\r\n        setImageSliceData={setImageSliceData}\r\n        scrollbarHeight={scrollbarHeight}\r\n        servicesManager={servicesManager}\r\n      />\r\n\r\n      <CustomizableViewportOverlay\r\n        imageSliceData={imageSliceData}\r\n        viewportData={viewportData}\r\n        viewportIndex={viewportIndex}\r\n        servicesManager={servicesManager}\r\n        element={element}\r\n      />\r\n\r\n      <ViewportImageSliceLoadingIndicator\r\n        viewportData={viewportData}\r\n        element={element}\r\n      />\r\n\r\n      <ViewportOrientationMarkers\r\n        imageSliceData={imageSliceData}\r\n        element={element}\r\n        viewportData={viewportData}\r\n        servicesManager={servicesManager}\r\n        viewportIndex={viewportIndex}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CornerstoneOverlays;\r\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\r\nimport ReactResizeDetector from 'react-resize-detector';\r\nimport PropTypes from 'prop-types';\r\nimport * as cs3DTools from '@cornerstonejs/tools';\r\nimport {\r\n  Enums,\r\n  eventTarget,\r\n  getEnabledElement,\r\n  StackViewport,\r\n  utilities as csUtils,\r\n} from '@cornerstonejs/core';\r\nimport { MeasurementService } from '@ohif/core';\r\nimport {\r\n  CinePlayer,\r\n  useCine,\r\n  useViewportGrid,\r\n  Notification,\r\n  useViewportDialog,\r\n} from '@ohif/ui';\r\nimport {\r\n  IStackViewport,\r\n  IVolumeViewport,\r\n} from '@cornerstonejs/core/dist/esm/types';\r\n\r\nimport { setEnabledElement } from '../state';\r\n\r\nimport './OHIFCornerstoneViewport.css';\r\nimport CornerstoneOverlays from './Overlays/CornerstoneOverlays';\r\nimport getSOPInstanceAttributes from '../utils/measurementServiceMappings/utils/getSOPInstanceAttributes';\r\nimport CornerstoneServices from '../types/CornerstoneServices';\r\n\r\nconst STACK = 'stack';\r\n\r\n/**\r\n * Caches the jump to measurement operation, so that if display set is shown,\r\n * it can jump to the measurement.\r\n */\r\nlet cacheJumpToMeasurementEvent;\r\n\r\nfunction areEqual(prevProps, nextProps) {\r\n  if (nextProps.needsRerendering) {\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.displaySets.length !== nextProps.displaySets.length) {\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    prevProps.viewportOptions.orientation !==\r\n    nextProps.viewportOptions.orientation\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    prevProps.viewportOptions.toolGroupId !==\r\n    nextProps.viewportOptions.toolGroupId\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    prevProps.viewportOptions.viewportType !==\r\n    nextProps.viewportOptions.viewportType\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  const prevDisplaySets = prevProps.displaySets;\r\n  const nextDisplaySets = nextProps.displaySets;\r\n\r\n  if (prevDisplaySets.length !== nextDisplaySets.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < prevDisplaySets.length; i++) {\r\n    const prevDisplaySet = prevDisplaySets[i];\r\n\r\n    const foundDisplaySet = nextDisplaySets.find(\r\n      nextDisplaySet =>\r\n        nextDisplaySet.displaySetInstanceUID ===\r\n        prevDisplaySet.displaySetInstanceUID\r\n    );\r\n\r\n    if (!foundDisplaySet) {\r\n      return false;\r\n    }\r\n\r\n    // check they contain the same image\r\n    if (foundDisplaySet.images?.length !== prevDisplaySet.images?.length) {\r\n      return false;\r\n    }\r\n\r\n    // check if their imageIds are the same\r\n    if (foundDisplaySet.images?.length) {\r\n      for (let j = 0; j < foundDisplaySet.images.length; j++) {\r\n        if (\r\n          foundDisplaySet.images[j].imageId !== prevDisplaySet.images[j].imageId\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Todo: This should be done with expose of internal API similar to react-vtkjs-viewport\r\n// Then we don't need to worry about the re-renders if the props change.\r\nconst OHIFCornerstoneViewport = React.memo(props => {\r\n  const {\r\n    viewportIndex,\r\n    displaySets,\r\n    dataSource,\r\n    viewportOptions,\r\n    displaySetOptions,\r\n    servicesManager,\r\n    onElementEnabled,\r\n    onElementDisabled,\r\n    // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\r\n    // of the imageData in the OHIFCornerstoneViewport. This prop is used\r\n    // to set the initial state of the viewport's first image to render\r\n    initialImageIndex,\r\n  } = props;\r\n\r\n  const [scrollbarHeight, setScrollbarHeight] = useState('100px');\r\n  const [{ isCineEnabled, cines }, cineService] = useCine();\r\n  const [{ activeViewportIndex }] = useViewportGrid();\r\n  const [enabledVPElement, setEnabledVPElement] = useState(null);\r\n\r\n  const elementRef = useRef();\r\n\r\n  const {\r\n    measurementService,\r\n    displaySetService,\r\n    toolbarService,\r\n    toolGroupService,\r\n    syncGroupService,\r\n    cornerstoneViewportService,\r\n    cornerstoneCacheService,\r\n    viewportGridService,\r\n    stateSyncService,\r\n  } = servicesManager.services as CornerstoneServices;\r\n\r\n  const [viewportDialogState] = useViewportDialog();\r\n\r\n  const cineHandler = () => {\r\n    if (!cines || !cines[viewportIndex] || !enabledVPElement) {\r\n      return;\r\n    }\r\n\r\n    const cine = cines[viewportIndex];\r\n    const isPlaying = cine.isPlaying || false;\r\n    const frameRate = cine.frameRate || 24;\r\n\r\n    const validFrameRate = Math.max(frameRate, 1);\r\n\r\n    if (isPlaying) {\r\n      cineService.playClip(enabledVPElement, {\r\n        framesPerSecond: validFrameRate,\r\n      });\r\n    } else {\r\n      cineService.stopClip(enabledVPElement);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    eventTarget.addEventListener(\r\n      Enums.Events.STACK_VIEWPORT_NEW_STACK,\r\n      cineHandler\r\n    );\r\n\r\n    return () => {\r\n      cineService.setCine({ id: viewportIndex, isPlaying: false });\r\n      eventTarget.removeEventListener(\r\n        Enums.Events.STACK_VIEWPORT_NEW_STACK,\r\n        cineHandler\r\n      );\r\n    };\r\n  }, [enabledVPElement]);\r\n\r\n  useEffect(() => {\r\n    if (!cines || !cines[viewportIndex] || !enabledVPElement) {\r\n      return;\r\n    }\r\n\r\n    cineHandler();\r\n\r\n    return () => {\r\n      if (enabledVPElement && cines?.[viewportIndex]?.isPlaying) {\r\n        cineService.stopClip(enabledVPElement);\r\n      }\r\n    };\r\n  }, [cines, viewportIndex, cineService, enabledVPElement, cineHandler]);\r\n\r\n  const cine = cines[viewportIndex];\r\n  const isPlaying = (cine && cine.isPlaying) || false;\r\n\r\n  const handleCineClose = () => {\r\n    toolbarService.recordInteraction({\r\n      groupId: 'MoreTools',\r\n      itemId: 'cine',\r\n      interactionType: 'toggle',\r\n      commands: [\r\n        {\r\n          commandName: 'toggleCine',\r\n          commandOptions: {},\r\n          context: 'CORNERSTONE',\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  // useCallback for scroll bar height calculation\r\n  const setImageScrollBarHeight = useCallback(() => {\r\n    const scrollbarHeight = `${elementRef.current.clientHeight - 20}px`;\r\n    setScrollbarHeight(scrollbarHeight);\r\n  }, [elementRef]);\r\n\r\n  // useCallback for onResize\r\n  const onResize = useCallback(() => {\r\n    if (elementRef.current) {\r\n      cornerstoneViewportService.resize();\r\n      setImageScrollBarHeight();\r\n    }\r\n  }, [elementRef]);\r\n\r\n  const storePresentation = () => {\r\n    const currentPresentation = cornerstoneViewportService.getPresentation(\r\n      viewportIndex\r\n    );\r\n    if (!currentPresentation || !currentPresentation.presentationIds) return;\r\n    const {\r\n      lutPresentationStore,\r\n      positionPresentationStore,\r\n    } = stateSyncService.getState();\r\n    const { presentationIds } = currentPresentation;\r\n    const { lutPresentationId, positionPresentationId } = presentationIds || {};\r\n    const storeState = {};\r\n    if (lutPresentationId) {\r\n      storeState.lutPresentationStore = {\r\n        ...lutPresentationStore,\r\n        [lutPresentationId]: currentPresentation,\r\n      };\r\n    }\r\n    if (positionPresentationId) {\r\n      storeState.positionPresentationStore = {\r\n        ...positionPresentationStore,\r\n        [positionPresentationId]: currentPresentation,\r\n      };\r\n    }\r\n    stateSyncService.store(storeState);\r\n  };\r\n\r\n  const cleanUpServices = useCallback(() => {\r\n    const viewportInfo = cornerstoneViewportService.getViewportInfoByIndex(\r\n      viewportIndex\r\n    );\r\n\r\n    if (!viewportInfo) {\r\n      return;\r\n    }\r\n\r\n    const viewportId = viewportInfo.getViewportId();\r\n    const renderingEngineId = viewportInfo.getRenderingEngineId();\r\n    const syncGroups = viewportInfo.getSyncGroups();\r\n\r\n    toolGroupService.removeViewportFromToolGroup(viewportId, renderingEngineId);\r\n\r\n    syncGroupService.removeViewportFromSyncGroup(\r\n      viewportId,\r\n      renderingEngineId,\r\n      syncGroups\r\n    );\r\n  }, [viewportIndex, viewportOptions.viewportId]);\r\n\r\n  const elementEnabledHandler = useCallback(\r\n    evt => {\r\n      // check this is this element reference and return early if doesn't match\r\n      if (evt.detail.element !== elementRef.current) {\r\n        return;\r\n      }\r\n\r\n      const { viewportId, element } = evt.detail;\r\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(\r\n        viewportId\r\n      );\r\n      const viewportIndex = viewportInfo.getViewportIndex();\r\n\r\n      setEnabledElement(viewportIndex, element);\r\n      setEnabledVPElement(element);\r\n\r\n      const renderingEngineId = viewportInfo.getRenderingEngineId();\r\n      const toolGroupId = viewportInfo.getToolGroupId();\r\n      const syncGroups = viewportInfo.getSyncGroups();\r\n\r\n      toolGroupService.addViewportToToolGroup(\r\n        viewportId,\r\n        renderingEngineId,\r\n        toolGroupId\r\n      );\r\n\r\n      syncGroupService.addViewportToSyncGroup(\r\n        viewportId,\r\n        renderingEngineId,\r\n        syncGroups\r\n      );\r\n\r\n      if (onElementEnabled) {\r\n        onElementEnabled(evt);\r\n      }\r\n    },\r\n    [viewportIndex, onElementEnabled, toolGroupService]\r\n  );\r\n\r\n  // disable the element upon unmounting\r\n  useEffect(() => {\r\n    cornerstoneViewportService.enableViewport(\r\n      viewportIndex,\r\n      viewportOptions,\r\n      elementRef.current\r\n    );\r\n\r\n    eventTarget.addEventListener(\r\n      Enums.Events.ELEMENT_ENABLED,\r\n      elementEnabledHandler\r\n    );\r\n\r\n    setImageScrollBarHeight();\r\n\r\n    return () => {\r\n      storePresentation();\r\n\r\n      cleanUpServices();\r\n\r\n      const viewportInfo = cornerstoneViewportService.getViewportInfoByIndex(\r\n        viewportIndex\r\n      );\r\n\r\n      cornerstoneViewportService.disableElement(viewportIndex);\r\n\r\n      if (onElementDisabled) {\r\n        onElementDisabled(viewportInfo);\r\n      }\r\n\r\n      eventTarget.removeEventListener(\r\n        Enums.Events.ELEMENT_ENABLED,\r\n        elementEnabledHandler\r\n      );\r\n    };\r\n  }, []);\r\n\r\n  // subscribe to displaySet metadata invalidation (updates)\r\n  // Currently, if the metadata changes we need to re-render the display set\r\n  // for it to take effect in the viewport. As we deal with scaling in the loading,\r\n  // we need to remove the old volume from the cache, and let the\r\n  // viewport to re-add it which will use the new metadata. Otherwise, the\r\n  // viewport will use the cached volume and the new metadata will not be used.\r\n  // Note: this approach does not actually end of sending network requests\r\n  // and it uses the network cache\r\n  useEffect(() => {\r\n    const { unsubscribe } = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\r\n      async invalidatedDisplaySetInstanceUID => {\r\n        const viewportInfo = cornerstoneViewportService.getViewportInfoByIndex(\r\n          viewportIndex\r\n        );\r\n\r\n        if (viewportInfo.hasDisplaySet(invalidatedDisplaySetInstanceUID)) {\r\n          const viewportData = viewportInfo.getViewportData();\r\n          const newViewportData = await cornerstoneCacheService.invalidateViewportData(\r\n            viewportData,\r\n            invalidatedDisplaySetInstanceUID,\r\n            dataSource,\r\n            displaySetService\r\n          );\r\n\r\n          const keepCamera = true;\r\n          cornerstoneViewportService.updateViewport(\r\n            viewportIndex,\r\n            newViewportData,\r\n            keepCamera\r\n          );\r\n        }\r\n      }\r\n    );\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [viewportIndex]);\r\n\r\n  useEffect(() => {\r\n    // handle the default viewportType to be stack\r\n    if (!viewportOptions.viewportType) {\r\n      viewportOptions.viewportType = STACK;\r\n    }\r\n\r\n    const loadViewportData = async () => {\r\n      const viewportData = await cornerstoneCacheService.createViewportData(\r\n        displaySets,\r\n        viewportOptions,\r\n        dataSource,\r\n        initialImageIndex\r\n      );\r\n\r\n      // The presentation state will have been stored previously by closing\r\n      // a viewport.  Otherwise, this viewport will be unchanged and the\r\n      // presentation information will be directly carried over.\r\n      const {\r\n        lutPresentationStore,\r\n        positionPresentationStore,\r\n      } = stateSyncService.getState();\r\n      const { presentationIds } = viewportOptions;\r\n      const presentations = {\r\n        positionPresentation:\r\n          positionPresentationStore[presentationIds?.positionPresentationId],\r\n        lutPresentation:\r\n          lutPresentationStore[presentationIds?.lutPresentationId],\r\n      };\r\n      let measurement;\r\n      if (cacheJumpToMeasurementEvent?.viewportIndex === viewportIndex) {\r\n        measurement = cacheJumpToMeasurementEvent.measurement;\r\n        // Delete the position presentation so that viewport navigates direct\r\n        presentations.positionPresentation = null;\r\n        cacheJumpToMeasurementEvent = null;\r\n      }\r\n\r\n      cornerstoneViewportService.setViewportData(\r\n        viewportIndex,\r\n        viewportData,\r\n        viewportOptions,\r\n        displaySetOptions,\r\n        presentations\r\n      );\r\n\r\n      if (measurement) {\r\n        cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\r\n      }\r\n    };\r\n\r\n    loadViewportData();\r\n  }, [viewportOptions, displaySets, dataSource]);\r\n\r\n  /**\r\n   * There are two scenarios for jump to click\r\n   * 1. Current viewports contain the displaySet that the annotation was drawn on\r\n   * 2. Current viewports don't contain the displaySet that the annotation was drawn on\r\n   * and we need to change the viewports displaySet for jumping.\r\n   * Since measurement_jump happens via events and listeners, the former case is handled\r\n   * by the measurement_jump direct callback, but the latter case is handled first by\r\n   * the viewportGrid to set the correct displaySet on the viewport, AND THEN we check\r\n   * the cache for jumping to see if there is any jump queued, then we jump to the correct slice.\r\n   */\r\n  useEffect(() => {\r\n    const unsubscribeFromJumpToMeasurementEvents = _subscribeToJumpToMeasurementEvents(\r\n      measurementService,\r\n      displaySetService,\r\n      elementRef,\r\n      viewportIndex,\r\n      displaySets,\r\n      viewportGridService,\r\n      cornerstoneViewportService\r\n    );\r\n\r\n    _checkForCachedJumpToMeasurementEvents(\r\n      measurementService,\r\n      displaySetService,\r\n      elementRef,\r\n      viewportIndex,\r\n      displaySets,\r\n      viewportGridService,\r\n      cornerstoneViewportService\r\n    );\r\n\r\n    return () => {\r\n      unsubscribeFromJumpToMeasurementEvents();\r\n    };\r\n  }, [displaySets, elementRef, viewportIndex]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"viewport-wrapper\">\r\n        <ReactResizeDetector\r\n          handleWidth\r\n          handleHeight\r\n          skipOnMount={true} // Todo: make these configurable\r\n          refreshMode={'debounce'}\r\n          refreshRate={200} // transition amount in side panel\r\n          onResize={onResize}\r\n          targetRef={elementRef.current}\r\n        />\r\n        <div\r\n          className=\"cornerstone-viewport-element\"\r\n          style={{ height: '100%', width: '100%' }}\r\n          onContextMenu={e => e.preventDefault()}\r\n          onMouseDown={e => e.preventDefault()}\r\n          ref={elementRef}\r\n        ></div>\r\n        <CornerstoneOverlays\r\n          viewportIndex={viewportIndex}\r\n          toolBarService={toolbarService}\r\n          element={elementRef.current}\r\n          scrollbarHeight={scrollbarHeight}\r\n          servicesManager={servicesManager}\r\n        />\r\n        {isCineEnabled && (\r\n          <CinePlayer\r\n            className=\"absolute left-1/2 -translate-x-1/2 bottom-3\"\r\n            isPlaying={isPlaying}\r\n            onClose={handleCineClose}\r\n            onPlayPauseChange={isPlaying =>\r\n              cineService.setCine({\r\n                id: activeViewportIndex,\r\n                isPlaying,\r\n              })\r\n            }\r\n            onFrameRateChange={frameRate =>\r\n              cineService.setCine({\r\n                id: activeViewportIndex,\r\n                frameRate,\r\n              })\r\n            }\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"absolute w-full\">\r\n        {viewportDialogState.viewportIndex === viewportIndex && (\r\n          <Notification\r\n            id=\"viewport-notification\"\r\n            message={viewportDialogState.message}\r\n            type={viewportDialogState.type}\r\n            actions={viewportDialogState.actions}\r\n            onSubmit={viewportDialogState.onSubmit}\r\n            onOutsideClick={viewportDialogState.onOutsideClick}\r\n          />\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}, areEqual);\r\n\r\nfunction _subscribeToJumpToMeasurementEvents(\r\n  measurementService,\r\n  displaySetService,\r\n  elementRef,\r\n  viewportIndex,\r\n  displaySets,\r\n  viewportGridService,\r\n  cornerstoneViewportService\r\n) {\r\n  const displaysUIDs = displaySets.map(\r\n    displaySet => displaySet.displaySetInstanceUID\r\n  );\r\n  const { unsubscribe } = measurementService.subscribe(\r\n    MeasurementService.EVENTS.JUMP_TO_MEASUREMENT_VIEWPORT,\r\n    props => {\r\n      cacheJumpToMeasurementEvent = props;\r\n      const { viewportIndex: jumpIndex, measurement, isConsumed } = props;\r\n      if (!measurement || isConsumed) return;\r\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport === undefined) {\r\n        // Decide on which viewport should handle this\r\n        cacheJumpToMeasurementEvent.cornerstoneViewport = cornerstoneViewportService.getViewportIndexToJump(\r\n          jumpIndex,\r\n          measurement.displaySetInstanceUID,\r\n          { referencedImageId: measurement.referencedImageId }\r\n        );\r\n      }\r\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport !== viewportIndex) {\r\n        return;\r\n      }\r\n      _jumpToMeasurement(\r\n        measurement,\r\n        elementRef,\r\n        viewportIndex,\r\n        measurementService,\r\n        displaySetService,\r\n        viewportGridService,\r\n        cornerstoneViewportService\r\n      );\r\n    }\r\n  );\r\n\r\n  return unsubscribe;\r\n}\r\n\r\n// Check if there is a queued jumpToMeasurement event\r\nfunction _checkForCachedJumpToMeasurementEvents(\r\n  measurementService,\r\n  displaySetService,\r\n  elementRef,\r\n  viewportIndex,\r\n  displaySets,\r\n  viewportGridService,\r\n  cornerstoneViewportService\r\n) {\r\n  if (!cacheJumpToMeasurementEvent) return;\r\n  if (cacheJumpToMeasurementEvent.isConsumed) {\r\n    cacheJumpToMeasurementEvent = null;\r\n    return;\r\n  }\r\n  const displaysUIDs = displaySets.map(\r\n    displaySet => displaySet.displaySetInstanceUID\r\n  );\r\n  if (!displaysUIDs?.length) return;\r\n\r\n  // Jump to measurement if the measurement exists\r\n  const { measurement } = cacheJumpToMeasurementEvent;\r\n  if (measurement && elementRef) {\r\n    if (displaysUIDs.includes(measurement?.displaySetInstanceUID)) {\r\n      _jumpToMeasurement(\r\n        measurement,\r\n        elementRef,\r\n        viewportIndex,\r\n        measurementService,\r\n        displaySetService,\r\n        viewportGridService,\r\n        cornerstoneViewportService\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction _jumpToMeasurement(\r\n  measurement,\r\n  targetElementRef,\r\n  viewportIndex,\r\n  measurementService,\r\n  displaySetService,\r\n  viewportGridService,\r\n  cornerstoneViewportService\r\n) {\r\n  const targetElement = targetElementRef.current;\r\n  const { displaySetInstanceUID, SOPInstanceUID, frameNumber } = measurement;\r\n\r\n  if (!SOPInstanceUID) {\r\n    console.warn('cannot jump in a non-acquisition plane measurements yet');\r\n    return;\r\n  }\r\n\r\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(\r\n    displaySetInstanceUID\r\n  );\r\n\r\n  // Todo: setCornerstoneMeasurementActive should be handled by the toolGroupManager\r\n  //  to set it properly\r\n  // setCornerstoneMeasurementActive(measurement);\r\n\r\n  viewportGridService.setActiveViewportIndex(viewportIndex);\r\n\r\n  const enabledElement = getEnabledElement(targetElement);\r\n\r\n  const viewportInfo = cornerstoneViewportService.getViewportInfoByIndex(\r\n    viewportIndex\r\n  );\r\n\r\n  if (enabledElement) {\r\n    // See how the jumpToSlice() of Cornerstone3D deals with imageIdx param.\r\n    const viewport = enabledElement.viewport as\r\n      | IStackViewport\r\n      | IVolumeViewport;\r\n\r\n    let imageIdIndex = 0;\r\n    let viewportCameraDirectionMatch = true;\r\n\r\n    if (viewport instanceof StackViewport) {\r\n      const imageIds = viewport.getImageIds();\r\n      imageIdIndex = imageIds.findIndex(imageId => {\r\n        const {\r\n          SOPInstanceUID: aSOPInstanceUID,\r\n          frameNumber: aFrameNumber,\r\n        } = getSOPInstanceAttributes(imageId);\r\n        return (\r\n          aSOPInstanceUID === SOPInstanceUID &&\r\n          (!frameNumber || frameNumber === aFrameNumber)\r\n        );\r\n      });\r\n    } else {\r\n      // for volume viewport we can't rely on the imageIdIndex since it can be\r\n      // a reconstructed view that doesn't match the original slice numbers etc.\r\n      const { viewPlaneNormal: measurementViewPlane } = measurement.metadata;\r\n      imageIdIndex = referencedDisplaySet.images.findIndex(\r\n        i => i.SOPInstanceUID === SOPInstanceUID\r\n      );\r\n\r\n      const { viewPlaneNormal: viewportViewPlane } = viewport.getCamera();\r\n\r\n      // should compare abs for both planes since the direction can be flipped\r\n      if (\r\n        measurementViewPlane &&\r\n        !csUtils.isEqual(\r\n          measurementViewPlane.map(Math.abs),\r\n          viewportViewPlane.map(Math.abs)\r\n        )\r\n      ) {\r\n        viewportCameraDirectionMatch = false;\r\n      }\r\n    }\r\n\r\n    if (!viewportCameraDirectionMatch || imageIdIndex === -1) {\r\n      return;\r\n    }\r\n\r\n    cs3DTools.utilities.jumpToSlice(targetElement, {\r\n      imageIndex: imageIdIndex,\r\n    });\r\n\r\n    cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\r\n    // Jump to measurement consumed, remove.\r\n    cacheJumpToMeasurementEvent?.consume?.();\r\n    cacheJumpToMeasurementEvent = null;\r\n  }\r\n}\r\n\r\n// Component displayName\r\nOHIFCornerstoneViewport.displayName = 'OHIFCornerstoneViewport';\r\n\r\nOHIFCornerstoneViewport.propTypes = {\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  displaySets: PropTypes.array.isRequired,\r\n  dataSource: PropTypes.object.isRequired,\r\n  viewportOptions: PropTypes.object,\r\n  displaySetOptions: PropTypes.arrayOf(PropTypes.any),\r\n  servicesManager: PropTypes.object.isRequired,\r\n  onElementEnabled: PropTypes.func,\r\n  // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\r\n  // of the imageData in the OHIFCornerstoneViewport. This prop is used\r\n  // to set the initial state of the viewport's first image to render\r\n  initialImageIdOrIndex: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n  ]),\r\n};\r\n\r\nexport default OHIFCornerstoneViewport;\r\n"],"names":["CornerstoneImageScrollbar","_ref","viewportData","viewportIndex","element","imageSliceData","setImageSliceData","scrollbarHeight","servicesManager","cineService","cornerstoneViewportService","services","useEffect","viewport","getCornerstoneViewportByIndex","viewportType","Enums","STACK","ORTHOGRAPHIC","sliceData","utilities","imageIndex","numberOfSlices","getCurrentImageIdIndex","data","imageIds","length","updateStackIndex","event","newImageIdIndex","detail","addEventListener","STACK_VIEWPORT_SCROLL","removeEventListener","updateVolumeIndex","VOLUME_NEW_IMAGE","React","ImageScrollbar","onChange","evt","onImageScrollbarChange","viewportId","getViewportInfoByIndex","getViewportId","getCornerstoneViewport","isCineEnabled","getState","stopClip","setCine","id","isPlaying","csToolsUtils","debounceLoading","max","height","value","propTypes","PropTypes","isRequired","Element","formatNumberPrecision","number","precision","arguments","undefined","parseFloat","toFixed","formatDICOMDate","date","strFormat","moment","format","formatDICOMTime","time","formatPN","name","cleaned","split","filter","s","join","trim","EPSILON","VOIOverlayItem","voi","customization","windowWidth","windowCenter","className","style","color","ZoomOverlayItem","_ref2","scale","InstanceNumberOverlayItem","_ref3","instanceNumber","CustomizableViewportOverlay","_ref4","toolbarService","customizationService","setVOI","useState","setScale","activeTools","setActiveTools","topLeftCustomization","getModeCustomization","topRightCustomization","bottomLeftCustomization","bottomRightCustomization","instance","useMemo","imageId","volumes","metaData","_getViewportInstance","generalImageModule","parseInt","_getInstanceNumberFromStack","volume","direction","cornerstoneViewport","camera","getCamera","viewPlaneNormal","scanAxisNormal","slice","cross","vec3","_getInstanceNumberFromVolume","_getInstanceNumber","getActiveTools","updateVOI","eventDetail","range","lower","upper","VOI_MODIFIED","updateScale","previousCamera","parallelScale","imageData","getImageData","spacing","clientHeight","CAMERA_MODIFIED","unsubscribe","subscribe","EVENTS","TOOL_BAR_STATE_MODIFIED","_renderOverlayItem","useCallback","item","overlayItemProps","formatters","formatDate","formatTime","customizationType","renderItem","transform","content","getTopLeftContent","items","map","i","key","getTopRightContent","getBottomLeftContent","getBottomRightContent","ViewportOverlay","topLeft","topRight","bottomLeft","bottomRight","getOrientationStringLPS","invertOrientationStringLPS","ViewportOrientationMarkers","orientationMarkers","rotation","setRotation","flipHorizontal","setFlipHorizontal","flipVertical","setFlipVertical","cameraModifiedListener","markers","rowCosines","columnCosines","getEnabledElement","viewUp","viewRight","rowString","columnString","oppositeRowString","top","left","right","bottom","_getOrientationMarkers","ohifViewport","console","log","backgroundColor","getViewportOptions","background","isLight","csUtils","m","index","classNames","percentComplete","error","defaultProps","ViewportImageSliceLoadingIndicator","loading","setLoading","setError","loadIndicatorRef","useRef","imageIdToBeLoaded","setLoadingState","clearTimeout","current","setTimeout","setFinishLoadingState","setErrorState","IMAGE_LOAD_ERROR","STACK_NEW_IMAGE","props","setViewportData","VIEWPORT_DATA_CHANGED","viewportInfo","viewportOptions","customViewportProps","hideOverlays","ViewportImageScrollbar","cacheJumpToMeasurementEvent","areEqual","prevProps","nextProps","needsRerendering","displaySets","orientation","toolGroupId","prevDisplaySets","nextDisplaySets","prevDisplaySet","foundDisplaySet","find","nextDisplaySet","displaySetInstanceUID","images","j","OHIFCornerstoneViewport","dataSource","displaySetOptions","onElementEnabled","onElementDisabled","initialImageIndex","setScrollbarHeight","cines","useCine","activeViewportIndex","useViewportGrid","enabledVPElement","setEnabledVPElement","elementRef","measurementService","displaySetService","toolGroupService","syncGroupService","cornerstoneCacheService","viewportGridService","stateSyncService","viewportDialogState","useViewportDialog","cineHandler","cine","frameRate","validFrameRate","Math","playClip","framesPerSecond","eventTarget","STACK_VIEWPORT_NEW_STACK","setImageScrollBarHeight","onResize","resize","cleanUpServices","renderingEngineId","getRenderingEngineId","syncGroups","getSyncGroups","removeViewportFromToolGroup","removeViewportFromSyncGroup","elementEnabledHandler","getViewportInfo","getViewportIndex","setEnabledElement","getToolGroupId","addViewportToToolGroup","addViewportToSyncGroup","enableViewport","ELEMENT_ENABLED","storePresentation","currentPresentation","getPresentation","presentationIds","lutPresentationStore","positionPresentationStore","lutPresentationId","positionPresentationId","storeState","store","disableElement","DISPLAY_SET_SERIES_METADATA_INVALIDATED","async","hasDisplaySet","invalidatedDisplaySetInstanceUID","getViewportData","newViewportData","invalidateViewportData","keepCamera","updateViewport","createViewportData","presentations","positionPresentation","lutPresentation","measurement","cs3DTools","uid","loadViewportData","unsubscribeFromJumpToMeasurementEvents","displaySet","MeasurementService","JUMP_TO_MEASUREMENT_VIEWPORT","jumpIndex","isConsumed","getViewportIndexToJump","referencedImageId","_jumpToMeasurement","_subscribeToJumpToMeasurementEvents","displaysUIDs","includes","_checkForCachedJumpToMeasurementEvents","ReactResizeDetector","handleWidth","handleHeight","skipOnMount","refreshMode","refreshRate","targetRef","width","onContextMenu","e","preventDefault","onMouseDown","ref","CornerstoneOverlays","toolBarService","CinePlayer","onClose","handleCineClose","recordInteraction","groupId","itemId","interactionType","commands","commandName","commandOptions","context","onPlayPauseChange","onFrameRateChange","Notification","message","type","actions","onSubmit","onOutsideClick","targetElementRef","targetElement","SOPInstanceUID","frameNumber","warn","referencedDisplaySet","getDisplaySetByUID","setActiveViewportIndex","enabledElement","imageIdIndex","viewportCameraDirectionMatch","StackViewport","getImageIds","findIndex","aSOPInstanceUID","aFrameNumber","getSOPInstanceAttributes","measurementViewPlane","metadata","viewportViewPlane","abs","consume","displayName","initialImageIdOrIndex"],"sourceRoot":""}