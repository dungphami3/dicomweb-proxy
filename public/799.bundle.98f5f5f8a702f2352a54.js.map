{"version":3,"file":"799.bundle.98f5f5f8a702f2352a54.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/viewports/TrackedCornerstoneViewport.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport OHIF, { utils } from '@ohif/core';\r\n\r\nimport { ViewportActionBar, Tooltip, Icon } from '@ohif/ui';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { annotation } from '@cornerstonejs/tools';\r\nimport { useTrackedMeasurements } from './../getContextModule';\r\nimport { BaseVolumeViewport, Enums } from '@cornerstonejs/core';\r\n\r\nconst { formatDate } = utils;\r\n\r\nfunction TrackedCornerstoneViewport(props) {\r\n  const {\r\n    displaySets,\r\n    viewportIndex,\r\n    viewportLabel,\r\n    servicesManager,\r\n    extensionManager,\r\n    viewportOptions,\r\n  } = props;\r\n\r\n  const { t } = useTranslation('TrackedViewport');\r\n\r\n  const {\r\n    measurementService,\r\n    cornerstoneViewportService,\r\n  } = servicesManager.services;\r\n\r\n  // Todo: handling more than one displaySet on the same viewport\r\n  const displaySet = displaySets[0];\r\n\r\n  const [trackedMeasurements] = useTrackedMeasurements();\r\n  const [isTracked, setIsTracked] = useState(false);\r\n  const [trackedMeasurementUID, setTrackedMeasurementUID] = useState(null);\r\n  const [viewportElem, setViewportElem] = useState(null);\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n  const viewportId = viewportOptions.viewportId;\r\n\r\n  const {\r\n    SeriesDate,\r\n    SeriesDescription,\r\n    SeriesInstanceUID,\r\n    SeriesNumber,\r\n  } = displaySet;\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    SpacingBetweenSlices,\r\n    ManufacturerModelName,\r\n  } = displaySet.images[0];\r\n\r\n  const updateIsTracked = useCallback(() => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(\r\n      viewportIndex\r\n    );\r\n\r\n    if (viewport instanceof BaseVolumeViewport) {\r\n      // A current image id will only exist for volume viewports that can have measurements tracked.\r\n      // Typically these are those volume viewports for the series of acquisition.\r\n      const currentImageId = viewport?.getCurrentImageId();\r\n\r\n      if (!currentImageId) {\r\n        if (isTracked) {\r\n          setIsTracked(false);\r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (trackedSeries.includes(SeriesInstanceUID) !== isTracked) {\r\n      setIsTracked(!isTracked);\r\n    }\r\n  }, [isTracked, trackedMeasurements, viewportIndex, SeriesInstanceUID]);\r\n\r\n  const onElementEnabled = useCallback(\r\n    evt => {\r\n      if (evt.detail.element !== viewportElem) {\r\n        // The VOLUME_VIEWPORT_NEW_VOLUME event allows updateIsTracked to reliably fetch the image id for a volume viewport.\r\n        evt.detail.element?.addEventListener(\r\n          Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n          updateIsTracked\r\n        );\r\n        setViewportElem(evt.detail.element);\r\n      }\r\n    },\r\n    [updateIsTracked, viewportElem]\r\n  );\r\n\r\n  const onElementDisabled = useCallback(() => {\r\n    viewportElem?.removeEventListener(\r\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n      updateIsTracked\r\n    );\r\n  }, [updateIsTracked, viewportElem]);\r\n\r\n  useEffect(updateIsTracked, [updateIsTracked]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\r\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\r\n      props => {\r\n        if (props.viewportIndex !== viewportIndex) {\r\n          return;\r\n        }\r\n\r\n        updateIsTracked();\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [updateIsTracked, viewportIndex]);\r\n\r\n  useEffect(() => {\r\n    if (isTracked) {\r\n      annotation.config.style.setViewportToolStyles(viewportId, {\r\n        global: {\r\n          lineDash: '',\r\n        },\r\n      });\r\n\r\n      cornerstoneViewportService\r\n        .getRenderingEngine()\r\n        .renderViewport(viewportId);\r\n\r\n      return;\r\n    }\r\n\r\n    annotation.config.style.setViewportToolStyles(viewportId, {\r\n      global: {\r\n        lineDash: '4,4',\r\n      },\r\n    });\r\n\r\n    cornerstoneViewportService.getRenderingEngine().renderViewport(viewportId);\r\n\r\n    return () => {\r\n      annotation.config.style.setViewportToolStyles(viewportId, {});\r\n    };\r\n  }, [isTracked]);\r\n\r\n  function switchMeasurement(direction) {\r\n    const newTrackedMeasurementUID = _getNextMeasurementUID(\r\n      direction,\r\n      servicesManager,\r\n      trackedMeasurementUID,\r\n      trackedMeasurements\r\n    );\r\n\r\n    if (!newTrackedMeasurementUID) {\r\n      return;\r\n    }\r\n\r\n    setTrackedMeasurementUID(newTrackedMeasurementUID);\r\n\r\n    measurementService.jumpToMeasurement(\r\n      viewportIndex,\r\n      newTrackedMeasurementUID\r\n    );\r\n  }\r\n\r\n  const getCornerstoneViewport = () => {\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    return (\r\n      <Component\r\n        {...props}\r\n        onElementEnabled={onElementEnabled}\r\n        onElementDisabled={onElementDisabled}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ViewportActionBar\r\n        onDoubleClick={evt => {\r\n          evt.stopPropagation();\r\n          evt.preventDefault();\r\n        }}\r\n        useAltStyling={isTracked}\r\n        onArrowsClick={direction => switchMeasurement(direction)}\r\n        getStatusComponent={() => _getStatusComponent(isTracked)}\r\n        studyData={{\r\n          label: viewportLabel,\r\n          studyDate: formatDate(SeriesDate), // TODO: This is series date. Is that ok?\r\n          currentSeries: SeriesNumber, // TODO - switch entire currentSeries to be UID based or actual position based\r\n          seriesDescription: SeriesDescription,\r\n          patientInformation: {\r\n            patientName: PatientName ? OHIF.utils.formatPN(PatientName) : '',\r\n            patientSex: PatientSex || '',\r\n            patientAge: PatientAge || '',\r\n            MRN: PatientID || '',\r\n            thickness: SliceThickness\r\n              ? `${parseFloat(SliceThickness).toFixed(2)}mm`\r\n              : '',\r\n            spacing:\r\n              SpacingBetweenSlices !== undefined\r\n                ? `${parseFloat(SpacingBetweenSlices).toFixed(2)}mm`\r\n                : '',\r\n            scanner: ManufacturerModelName || '',\r\n          },\r\n        }}\r\n      />\r\n      {/* TODO: Viewport interface to accept stack or layers of content like this? */}\r\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\r\n        {getCornerstoneViewport()}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTrackedCornerstoneViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n  customProps: PropTypes.object,\r\n};\r\n\r\nTrackedCornerstoneViewport.defaultProps = {\r\n  customProps: {},\r\n};\r\n\r\nfunction _getNextMeasurementUID(\r\n  direction,\r\n  servicesManager,\r\n  trackedMeasurementId,\r\n  trackedMeasurements\r\n) {\r\n  const { measurementService, viewportGridService } = servicesManager.services;\r\n  const measurements = measurementService.getMeasurements();\r\n\r\n  const { activeViewportIndex, viewports } = viewportGridService.getState();\r\n  const {\r\n    displaySetInstanceUIDs: activeViewportDisplaySetInstanceUIDs,\r\n  } = viewports[activeViewportIndex];\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  // Get the potentially trackable measurements for the series of the\r\n  // active viewport.\r\n  // The measurements to jump between are the same\r\n  // regardless if this series is tracked or not.\r\n\r\n  const filteredMeasurements = measurements.filter(\r\n    m =>\r\n      trackedSeries.includes(m.referenceSeriesUID) &&\r\n      activeViewportDisplaySetInstanceUIDs.includes(m.displaySetInstanceUID)\r\n  );\r\n\r\n  if (!filteredMeasurements.length) {\r\n    // No measurements on this series.\r\n    return;\r\n  }\r\n\r\n  const measurementCount = filteredMeasurements.length;\r\n\r\n  const uids = filteredMeasurements.map(fm => fm.uid);\r\n  let measurementIndex = uids.findIndex(uid => uid === trackedMeasurementId);\r\n\r\n  if (measurementIndex === -1) {\r\n    // Not tracking a measurement, or previous measurement now deleted, revert to 0.\r\n    measurementIndex = 0;\r\n  } else {\r\n    if (direction === 'left') {\r\n      measurementIndex--;\r\n\r\n      if (measurementIndex < 0) {\r\n        measurementIndex = measurementCount - 1;\r\n      }\r\n    } else if (direction === 'right') {\r\n      measurementIndex++;\r\n\r\n      if (measurementIndex === measurementCount) {\r\n        measurementIndex = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  const newTrackedMeasurementId = uids[measurementIndex];\r\n\r\n  return newTrackedMeasurementId;\r\n}\r\n\r\nfunction _getStatusComponent(isTracked) {\r\n  const trackedIcon = isTracked ? 'status-tracked' : 'status-untracked';\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <Tooltip\r\n        position=\"bottom-left\"\r\n        content={\r\n          <div className=\"flex py-2\">\r\n            <div className=\"flex pt-1\">\r\n              <Icon name=\"info-link\" className=\"w-4 text-primary-main\" />\r\n            </div>\r\n            <div className=\"flex ml-4\">\r\n              <span className=\"text-base text-common-light\">\r\n                {isTracked ? (\r\n                  <>\r\n                    Series is\r\n                    <span className=\"font-bold text-white\"> tracked</span> and\r\n                    can be viewed <br /> in the measurement panel\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    Measurements for\r\n                    <span className=\"font-bold text-white\"> untracked </span>\r\n                    series <br /> will not be shown in the <br /> measurements\r\n                    panel\r\n                  </>\r\n                )}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        }\r\n      >\r\n        <Icon name={trackedIcon} className=\"text-primary-light\" />\r\n      </Tooltip>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TrackedCornerstoneViewport;\r\n"],"names":["formatDate","utils","TrackedCornerstoneViewport","props","displaySets","viewportIndex","viewportLabel","servicesManager","extensionManager","viewportOptions","t","useTranslation","measurementService","cornerstoneViewportService","services","displaySet","trackedMeasurements","useTrackedMeasurements","isTracked","setIsTracked","useState","trackedMeasurementUID","setTrackedMeasurementUID","viewportElem","setViewportElem","trackedSeries","context","viewportId","SeriesDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","SpacingBetweenSlices","ManufacturerModelName","images","updateIsTracked","useCallback","viewport","getCornerstoneViewportByIndex","BaseVolumeViewport","currentImageId","getCurrentImageId","includes","onElementEnabled","evt","detail","element","addEventListener","Enums","VOLUME_VIEWPORT_NEW_VOLUME","onElementDisabled","removeEventListener","useEffect","unsubscribe","subscribe","EVENTS","VIEWPORT_DATA_CHANGED","annotation","setViewportToolStyles","global","lineDash","getRenderingEngine","renderViewport","React","ViewportActionBar","onDoubleClick","stopPropagation","preventDefault","useAltStyling","onArrowsClick","direction","newTrackedMeasurementUID","trackedMeasurementId","viewportGridService","measurements","getMeasurements","activeViewportIndex","viewports","getState","displaySetInstanceUIDs","activeViewportDisplaySetInstanceUIDs","filteredMeasurements","filter","m","referenceSeriesUID","displaySetInstanceUID","length","measurementCount","uids","map","fm","uid","measurementIndex","findIndex","_getNextMeasurementUID","jumpToMeasurement","switchMeasurement","getStatusComponent","trackedIcon","className","Tooltip","position","content","Icon","name","_getStatusComponent","studyData","label","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","formatPN","patientSex","patientAge","MRN","thickness","parseFloat","toFixed","spacing","undefined","scanner","getCornerstoneViewport","component","Component","getModuleEntry","_extends","propTypes","PropTypes","isRequired","dataSource","children","customProps","defaultProps"],"sourceRoot":""}