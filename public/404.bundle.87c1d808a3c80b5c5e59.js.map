{"version":3,"file":"404.bundle.87c1d808a3c80b5c5e59.js","mappings":"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","sources":["webpack:///../../../modes/tmtv/src/initToolGroups.js","webpack:///../../../modes/tmtv/src/toolbarButtons.js","webpack:///../../../modes/tmtv/src/id.js","webpack:///../../../modes/tmtv/src/index.js","webpack:///../../../modes/tmtv/src/utils/setCrosshairsConfiguration.js","webpack:///../../../modes/tmtv/src/utils/setFusionActiveVolume.js"],"sourcesContent":["export const toolGroupIds = {\r\n  CT: 'ctToolGroup',\r\n  PT: 'ptToolGroup',\r\n  Fusion: 'fusionToolGroup',\r\n  MIP: 'mipToolGroup',\r\n  default: 'default',\r\n  // MPR: 'mpr',\r\n};\r\n\r\nfunction _initToolGroups(toolNames, Enums, toolGroupService, commandsManager) {\r\n  const tools = {\r\n    active: [\r\n      {\r\n        toolName: toolNames.WindowLevel,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\r\n      },\r\n      {\r\n        toolName: toolNames.Pan,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\r\n      },\r\n      {\r\n        toolName: toolNames.Zoom,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }],\r\n      },\r\n      { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\r\n    ],\r\n    passive: [\r\n      { toolName: toolNames.Length },\r\n      { toolName: toolNames.ArrowAnnotate },\r\n      { toolName: toolNames.Bidirectional },\r\n      { toolName: toolNames.DragProbe },\r\n      { toolName: toolNames.Probe },\r\n      { toolName: toolNames.EllipticalROI },\r\n      { toolName: toolNames.RectangleROI },\r\n      { toolName: toolNames.StackScroll },\r\n      { toolName: toolNames.Angle },\r\n      { toolName: toolNames.CobbAngle },\r\n      { toolName: toolNames.Magnify },\r\n    ],\r\n    enabled: [{ toolName: toolNames.SegmentationDisplay }],\r\n    disabled: [{ toolName: toolNames.Crosshairs }],\r\n  };\r\n\r\n  const toolsConfig = {\r\n    [toolNames.Crosshairs]: {\r\n      viewportIndicators: false,\r\n      autoPan: {\r\n        enabled: false,\r\n        panSize: 10,\r\n      },\r\n    },\r\n    [toolNames.ArrowAnnotate]: {\r\n      getTextCallback: (callback, eventDetails) => {\r\n        commandsManager.runCommand('arrowTextCallback', {\r\n          callback,\r\n          eventDetails,\r\n        });\r\n      },\r\n\r\n      changeTextCallback: (data, eventDetails, callback) =>\r\n        commandsManager.runCommand('arrowTextCallback', {\r\n          callback,\r\n          data,\r\n          eventDetails,\r\n        }),\r\n    },\r\n  };\r\n\r\n  toolGroupService.createToolGroupAndAddTools(\r\n    toolGroupIds.CT,\r\n    tools,\r\n    toolsConfig\r\n  );\r\n  toolGroupService.createToolGroupAndAddTools(\r\n    toolGroupIds.PT,\r\n    {\r\n      active: tools.active,\r\n      passive: [\r\n        ...tools.passive,\r\n        { toolName: 'RectangleROIStartEndThreshold' },\r\n      ],\r\n      enabled: tools.enabled,\r\n      disabled: tools.disabled,\r\n    },\r\n    toolsConfig\r\n  );\r\n  toolGroupService.createToolGroupAndAddTools(\r\n    toolGroupIds.Fusion,\r\n    tools,\r\n    toolsConfig\r\n  );\r\n  toolGroupService.createToolGroupAndAddTools(\r\n    toolGroupIds.default,\r\n    tools,\r\n    toolsConfig\r\n  );\r\n\r\n  const mipTools = {\r\n    active: [\r\n      {\r\n        toolName: toolNames.VolumeRotateMouseWheel,\r\n      },\r\n      {\r\n        toolName: toolNames.MipJumpToClick,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\r\n      },\r\n    ],\r\n    enabled: [{ toolName: toolNames.SegmentationDisplay }],\r\n  };\r\n\r\n  const mipToolsConfig = {\r\n    [toolNames.VolumeRotateMouseWheel]: {\r\n      rotateIncrementDegrees: 0.1,\r\n    },\r\n    [toolNames.MipJumpToClick]: {\r\n      targetViewportIds: ['ptAXIAL', 'ptCORONAL', 'ptSAGITTAL'],\r\n    },\r\n  };\r\n\r\n  toolGroupService.createToolGroupAndAddTools(\r\n    toolGroupIds.MIP,\r\n    mipTools,\r\n    mipToolsConfig\r\n  );\r\n}\r\n\r\nfunction initMPRToolGroup(toolNames, Enums, toolGroupService, commandsManager) {\r\n  const tools = {\r\n    active: [\r\n      {\r\n        toolName: toolNames.WindowLevel,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\r\n      },\r\n      {\r\n        toolName: toolNames.Pan,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\r\n      },\r\n      {\r\n        toolName: toolNames.Zoom,\r\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }],\r\n      },\r\n      { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\r\n    ],\r\n    passive: [\r\n      { toolName: toolNames.Length },\r\n      { toolName: toolNames.ArrowAnnotate },\r\n      { toolName: toolNames.Bidirectional },\r\n      { toolName: toolNames.DragProbe },\r\n      { toolName: toolNames.EllipticalROI },\r\n      { toolName: toolNames.RectangleROI },\r\n      { toolName: toolNames.StackScroll },\r\n      { toolName: toolNames.Angle },\r\n      { toolName: toolNames.CobbAngle },\r\n      { toolName: toolNames.SegmentationDisplay },\r\n    ],\r\n    disabled: [{ toolName: toolNames.Crosshairs }],\r\n\r\n    // enabled\r\n    // disabled\r\n  };\r\n\r\n  const toolsConfig = {\r\n    [toolNames.Crosshairs]: {\r\n      viewportIndicators: false,\r\n      autoPan: {\r\n        enabled: false,\r\n        panSize: 10,\r\n      },\r\n    },\r\n    [toolNames.ArrowAnnotate]: {\r\n      getTextCallback: (callback, eventDetails) =>\r\n        commandsManager.runCommand('arrowTextCallback', {\r\n          callback,\r\n          eventDetails,\r\n        }),\r\n\r\n      changeTextCallback: (data, eventDetails, callback) =>\r\n        commandsManager.runCommand('arrowTextCallback', {\r\n          callback,\r\n          data,\r\n          eventDetails,\r\n        }),\r\n    },\r\n  };\r\n\r\n  toolGroupService.createToolGroupAndAddTools('mpr', tools, toolsConfig);\r\n}\r\n\r\nfunction initToolGroups(toolNames, Enums, toolGroupService, commandsManager) {\r\n  _initToolGroups(toolNames, Enums, toolGroupService, commandsManager);\r\n  // initMPRToolGroup(toolNames, Enums, toolGroupService, commandsManager);\r\n}\r\n\r\nexport default initToolGroups;\r\n","// TODO: torn, can either bake this here; or have to create a whole new button type\r\n// Only ways that you can pass in a custom React component for render :l\r\nimport { WindowLevelMenuItem } from '@ohif/ui';\r\nimport { defaults } from '@ohif/core';\r\nimport { toolGroupIds } from './initToolGroups';\r\nconst { windowLevelPresets } = defaults;\r\n/**\r\n *\r\n * @param {*} type - 'tool' | 'action' | 'toggle'\r\n * @param {*} id\r\n * @param {*} icon\r\n * @param {*} label\r\n */\r\nfunction _createButton(type, id, icon, label, commands, tooltip) {\r\n  return {\r\n    id,\r\n    icon,\r\n    label,\r\n    type,\r\n    commands,\r\n    tooltip,\r\n  };\r\n}\r\n\r\nfunction _createColormap(label, colormap) {\r\n  return {\r\n    id: label.toString(),\r\n    title: label,\r\n    subtitle: label,\r\n    type: 'action',\r\n    commands: [\r\n      {\r\n        commandName: 'setFusionPTColormap',\r\n        commandOptions: {\r\n          toolGroupId: toolGroupIds.Fusion,\r\n          colormap,\r\n        },\r\n      },\r\n      {\r\n        commandName: 'setFusionPTColormap',\r\n        commandOptions: {\r\n          toolGroupId: toolGroupIds.Fusion,\r\n          colormap,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\nconst _createActionButton = _createButton.bind(null, 'action');\r\nconst _createToggleButton = _createButton.bind(null, 'toggle');\r\nconst _createToolButton = _createButton.bind(null, 'tool');\r\n\r\n/**\r\n *\r\n * @param {*} preset - preset number (from above import)\r\n * @param {*} title\r\n * @param {*} subtitle\r\n */\r\nfunction _createWwwcPreset(preset, title, subtitle) {\r\n  return {\r\n    id: preset.toString(),\r\n    title,\r\n    subtitle,\r\n    type: 'action',\r\n    commands: [\r\n      {\r\n        commandName: 'setWindowLevel',\r\n        commandOptions: {\r\n          ...windowLevelPresets[preset],\r\n        },\r\n        context: 'CORNERSTONE',\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\nfunction _createCommands(commandName, toolName, toolGroupIds) {\r\n  return toolGroupIds.map(toolGroupId => ({\r\n    /* It's a command that is being run when the button is clicked. */\r\n    commandName,\r\n    commandOptions: {\r\n      toolName,\r\n      toolGroupId,\r\n    },\r\n    context: 'CORNERSTONE',\r\n  }));\r\n}\r\n\r\nconst toolbarButtons = [\r\n  // Measurement\r\n  {\r\n    id: 'MeasurementTools',\r\n    type: 'ohif.splitButton',\r\n    props: {\r\n      groupId: 'MeasurementTools',\r\n      isRadio: true, // ?\r\n      // Switch?\r\n      primary: _createToolButton(\r\n        'Length',\r\n        'tool-length',\r\n        'Length',\r\n        [\r\n          ..._createCommands('setToolActive', 'Length', [\r\n            toolGroupIds.CT,\r\n            toolGroupIds.PT,\r\n            toolGroupIds.Fusion,\r\n            // toolGroupIds.MPR,\r\n          ]),\r\n        ],\r\n        'Length'\r\n      ),\r\n      secondary: {\r\n        icon: 'chevron-down',\r\n        label: '',\r\n        isActive: true,\r\n        tooltip: 'More Measure Tools',\r\n      },\r\n      items: [\r\n        _createToolButton(\r\n          'Length',\r\n          'tool-length',\r\n          'Length',\r\n          [\r\n            ..._createCommands('setToolActive', 'Length', [\r\n              toolGroupIds.CT,\r\n              toolGroupIds.PT,\r\n              toolGroupIds.Fusion,\r\n              // toolGroupIds.MPR,\r\n            ]),\r\n          ],\r\n          'Length Tool'\r\n        ),\r\n        _createToolButton(\r\n          'Bidirectional',\r\n          'tool-bidirectional',\r\n          'Bidirectional',\r\n          [\r\n            ..._createCommands('setToolActive', 'Bidirectional', [\r\n              toolGroupIds.CT,\r\n              toolGroupIds.PT,\r\n              toolGroupIds.Fusion,\r\n              // toolGroupIds.MPR,\r\n            ]),\r\n          ],\r\n          'Bidirectional Tool'\r\n        ),\r\n        _createToolButton(\r\n          'ArrowAnnotate',\r\n          'tool-annotate',\r\n          'Annotation',\r\n          [\r\n            ..._createCommands('setToolActive', 'ArrowAnnotate', [\r\n              toolGroupIds.CT,\r\n              toolGroupIds.PT,\r\n              toolGroupIds.Fusion,\r\n              // toolGroupIds.MPR,\r\n            ]),\r\n          ],\r\n          'Arrow Annotate'\r\n        ),\r\n        _createToolButton(\r\n          'EllipticalROI',\r\n          'tool-elipse',\r\n          'Ellipse',\r\n          [\r\n            ..._createCommands('setToolActive', 'EllipticalROI', [\r\n              toolGroupIds.CT,\r\n              toolGroupIds.PT,\r\n              toolGroupIds.Fusion,\r\n              // toolGroupIds.MPR,\r\n            ]),\r\n          ],\r\n          'Ellipse Tool'\r\n        ),\r\n        _createToolButton(\r\n          'CircleROI',\r\n          'tool-circle',\r\n          'Circle',\r\n          [\r\n            ..._createCommands('setToolActive', 'CircleROI', [\r\n              toolGroupIds.CT,\r\n              toolGroupIds.PT,\r\n              toolGroupIds.Fusion,\r\n              // toolGroupIds.MPR,\r\n            ]),\r\n          ],\r\n          'Circle Tool'\r\n        ),\r\n      ],\r\n    },\r\n  },\r\n  // Zoom..\r\n  {\r\n    id: 'Zoom',\r\n    type: 'ohif.radioGroup',\r\n    props: {\r\n      type: 'tool',\r\n      icon: 'tool-zoom',\r\n      label: 'Zoom',\r\n      commands: [\r\n        ..._createCommands('setToolActive', 'Zoom', [\r\n          toolGroupIds.CT,\r\n          toolGroupIds.PT,\r\n          toolGroupIds.Fusion,\r\n          // toolGroupIds.MPR,\r\n        ]),\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    id: 'MPR',\r\n    type: 'ohif.action',\r\n    props: {\r\n      type: 'toggle',\r\n      icon: 'icon-mpr',\r\n      label: 'MPR',\r\n      commands: [\r\n        {\r\n          commandName: 'toggleHangingProtocol',\r\n          commandOptions: {\r\n            protocolId: 'mpr',\r\n          },\r\n          context: 'DEFAULT',\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  // Window Level + Presets...\r\n  {\r\n    id: 'WindowLevel',\r\n    type: 'ohif.splitButton',\r\n    props: {\r\n      groupId: 'WindowLevel',\r\n      primary: _createToolButton(\r\n        'WindowLevel',\r\n        'tool-window-level',\r\n        'Window Level',\r\n        [\r\n          ..._createCommands('setToolActive', 'WindowLevel', [\r\n            toolGroupIds.CT,\r\n            toolGroupIds.PT,\r\n            toolGroupIds.Fusion,\r\n            // toolGroupIds.MPR,\r\n          ]),\r\n        ],\r\n        'Window Level'\r\n      ),\r\n      secondary: {\r\n        icon: 'chevron-down',\r\n        label: 'W/L Manual',\r\n        isActive: true,\r\n        tooltip: 'W/L Presets',\r\n      },\r\n      isAction: true, // ?\r\n      renderer: WindowLevelMenuItem,\r\n      items: [\r\n        _createWwwcPreset(1, 'Soft tissue', '400 / 40'),\r\n        _createWwwcPreset(2, 'Lung', '1500 / -600'),\r\n        _createWwwcPreset(3, 'Liver', '150 / 90'),\r\n        _createWwwcPreset(4, 'Bone', '2500 / 480'),\r\n        _createWwwcPreset(5, 'Brain', '80 / 40'),\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    id: 'Crosshairs',\r\n    type: 'ohif.radioGroup',\r\n    props: {\r\n      type: 'tool',\r\n      icon: 'tool-crosshair',\r\n      label: 'Crosshairs',\r\n      commands: [\r\n        ..._createCommands('setToolActive', 'Crosshairs', [\r\n          toolGroupIds.CT,\r\n          toolGroupIds.PT,\r\n          toolGroupIds.Fusion,\r\n          // toolGroupIds.MPR,\r\n        ]),\r\n      ],\r\n    },\r\n  },\r\n  // Pan...\r\n  {\r\n    id: 'Pan',\r\n    type: 'ohif.radioGroup',\r\n    props: {\r\n      type: 'tool',\r\n      icon: 'tool-move',\r\n      label: 'Pan',\r\n      commands: [\r\n        ..._createCommands('setToolActive', 'Pan', [\r\n          toolGroupIds.CT,\r\n          toolGroupIds.PT,\r\n          toolGroupIds.Fusion,\r\n          // toolGroupIds.MPR,\r\n        ]),\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    id: 'RectangleROIStartEndThreshold',\r\n    type: 'ohif.radioGroup',\r\n    props: {\r\n      type: 'tool',\r\n      icon: 'tool-create-threshold',\r\n      label: 'Rectangle ROI Threshold',\r\n      commands: [\r\n        ..._createCommands('setToolActive', 'RectangleROIStartEndThreshold', [\r\n          toolGroupIds.PT,\r\n        ]),\r\n        {\r\n          commandName: 'displayNotification',\r\n          commandOptions: {\r\n            title: 'RectangleROI Threshold Tip',\r\n            text: 'RectangleROI Threshold tool should be used on PT Axial Viewport',\r\n            type: 'info',\r\n          },\r\n        },\r\n        {\r\n          commandName: 'setViewportActive',\r\n          commandOptions: {\r\n            viewportId: 'ptAXIAL',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    id: 'fusionPTColormap',\r\n    type: 'ohif.splitButton',\r\n    props: {\r\n      groupId: 'fusionPTColormap',\r\n      primary: _createToolButton(\r\n        'fusionPTColormap',\r\n        'tool-fusion-color',\r\n        'Fusion PT Colormap',\r\n        [],\r\n        'Fusion PT Colormap'\r\n      ),\r\n      secondary: {\r\n        icon: 'chevron-down',\r\n        label: 'PT Colormap',\r\n        isActive: true,\r\n        tooltip: 'PET Image Colormap',\r\n      },\r\n      isAction: true, // ?\r\n      renderer: WindowLevelMenuItem,\r\n      items: [\r\n        _createColormap('HSV', 'hsv'),\r\n        _createColormap('Hot Iron', 'hot_iron'),\r\n        _createColormap('S PET', 's_pet'),\r\n        _createColormap('Red Hot', 'red_hot'),\r\n        _createColormap('Perfusion', 'perfusion'),\r\n        _createColormap('Rainbow', 'rainbow_2'),\r\n        _createColormap('SUV', 'suv'),\r\n        _createColormap('GE 256', 'ge_256'),\r\n        _createColormap('GE', 'ge'),\r\n        _createColormap('Siemens', 'siemens'),\r\n      ],\r\n    },\r\n  },\r\n];\r\n\r\nexport default toolbarButtons;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","import { hotkeys, classes } from '@ohif/core';\r\nimport toolbarButtons from './toolbarButtons.js';\r\nimport { id } from './id.js';\r\nimport initToolGroups, { toolGroupIds } from './initToolGroups.js';\r\nimport setCrosshairsConfiguration from './utils/setCrosshairsConfiguration.js';\r\nimport setFusionActiveVolume from './utils/setFusionActiveVolume.js';\r\n\r\nconst { MetadataProvider } = classes;\r\n\r\nconst ohif = {\r\n  layout: '@ohif/extension-default.layoutTemplateModule.viewerLayout',\r\n  sopClassHandler: '@ohif/extension-default.sopClassHandlerModule.stack',\r\n  measurements: '@ohif/extension-default.panelModule.measure',\r\n  thumbnailList: '@ohif/extension-default.panelModule.seriesList',\r\n};\r\n\r\nconst cs3d = {\r\n  viewport: '@ohif/extension-cornerstone.viewportModule.cornerstone',\r\n};\r\n\r\nconst tmtv = {\r\n  hangingProtocol: '@ohif/extension-tmtv.hangingProtocolModule.ptCT',\r\n  petSUV: '@ohif/extension-tmtv.panelModule.petSUV',\r\n  ROIThresholdPanel: '@ohif/extension-tmtv.panelModule.ROIThresholdSeg',\r\n};\r\n\r\nconst extensionDependencies = {\r\n  // Can derive the versions at least process.env.from npm_package_version\r\n  '@ohif/extension-default': '^3.0.0',\r\n  '@ohif/extension-cornerstone': '^3.0.0',\r\n  '@ohif/extension-tmtv': '^3.0.0',\r\n};\r\n\r\nlet unsubscriptions = [];\r\nfunction modeFactory({ modeConfiguration }) {\r\n  return {\r\n    // TODO: We're using this as a route segment\r\n    // We should not be.\r\n    id,\r\n    routeName: 'tmtv',\r\n    displayName: 'Total Metabolic Tumor Volume',\r\n    /**\r\n     * Lifecycle hooks\r\n     */\r\n    onModeEnter: ({ servicesManager, extensionManager, commandsManager }) => {\r\n      const {\r\n        toolbarService,\r\n        toolGroupService,\r\n        hangingProtocolService,\r\n        displaySetService,\r\n      } = servicesManager.services;\r\n\r\n      const utilityModule = extensionManager.getModuleEntry(\r\n        '@ohif/extension-cornerstone.utilityModule.tools'\r\n      );\r\n\r\n      const { toolNames, Enums } = utilityModule.exports;\r\n\r\n      // Init Default and SR ToolGroups\r\n      initToolGroups(toolNames, Enums, toolGroupService, commandsManager);\r\n\r\n      const setWindowLevelActive = () => {\r\n        toolbarService.recordInteraction({\r\n          groupId: 'WindowLevel',\r\n          itemId: 'WindowLevel',\r\n          interactionType: 'tool',\r\n          commands: [\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: toolNames.WindowLevel,\r\n                toolGroupId: toolGroupIds.CT,\r\n              },\r\n              context: 'CORNERSTONE',\r\n            },\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: toolNames.WindowLevel,\r\n                toolGroupId: toolGroupIds.PT,\r\n              },\r\n              context: 'CORNERSTONE',\r\n            },\r\n            {\r\n              commandName: 'setToolActive',\r\n              commandOptions: {\r\n                toolName: toolNames.WindowLevel,\r\n                toolGroupId: toolGroupIds.Fusion,\r\n              },\r\n              context: 'CORNERSTONE',\r\n            },\r\n          ],\r\n        });\r\n      };\r\n\r\n      const { unsubscribe } = toolGroupService.subscribe(\r\n        toolGroupService.EVENTS.VIEWPORT_ADDED,\r\n        () => {\r\n          // For fusion toolGroup we need to add the volumeIds for the crosshairs\r\n          // since in the fusion viewport we don't want both PT and CT to render MIP\r\n          // when slabThickness is modified\r\n          const {\r\n            displaySetMatchDetails,\r\n          } = hangingProtocolService.getMatchDetails();\r\n\r\n          setCrosshairsConfiguration(\r\n            displaySetMatchDetails,\r\n            toolNames,\r\n            toolGroupService,\r\n            displaySetService\r\n          );\r\n\r\n          setFusionActiveVolume(\r\n            displaySetMatchDetails,\r\n            toolNames,\r\n            toolGroupService,\r\n            displaySetService\r\n          );\r\n\r\n          setWindowLevelActive();\r\n        }\r\n      );\r\n\r\n      unsubscriptions.push(unsubscribe);\r\n      toolbarService.init(extensionManager);\r\n      toolbarService.addButtons(toolbarButtons);\r\n      toolbarService.createButtonSection('primary', [\r\n        'MeasurementTools',\r\n        'Zoom',\r\n        'WindowLevel',\r\n        'Crosshairs',\r\n        'Pan',\r\n        'RectangleROIStartEndThreshold',\r\n        'fusionPTColormap',\r\n      ]);\r\n\r\n      // For the hanging protocol we need to decide on the window level\r\n      // based on whether the SUV is corrected or not, hence we can't hard\r\n      // code the window level in the hanging protocol but we add a custom\r\n      // attribute to the hanging protocol that will be used to get the\r\n      // window level based on the metadata\r\n      hangingProtocolService.addCustomAttribute(\r\n        'getPTVOIRange',\r\n        'get PT VOI based on corrected or not',\r\n        props => {\r\n          const ptDisplaySet = props.find(\r\n            imageSet => imageSet.Modality === 'PT'\r\n          );\r\n\r\n          if (!ptDisplaySet) {\r\n            return;\r\n          }\r\n\r\n          const { imageId } = ptDisplaySet.images[0];\r\n          const imageIdScalingFactor = MetadataProvider.get(\r\n            'scalingModule',\r\n            imageId\r\n          );\r\n\r\n          const isSUVAvailable =\r\n            imageIdScalingFactor && imageIdScalingFactor.suvbw;\r\n\r\n          if (isSUVAvailable) {\r\n            return {\r\n              windowWidth: 5,\r\n              windowCenter: 2.5,\r\n            };\r\n          }\r\n\r\n          return;\r\n        }\r\n      );\r\n    },\r\n    onModeExit: ({ servicesManager }) => {\r\n      const {\r\n        toolGroupService,\r\n        syncGroupService,\r\n        segmentationService,\r\n        cornerstoneViewportService,\r\n      } = servicesManager.services;\r\n\r\n      unsubscriptions.forEach(unsubscribe => unsubscribe());\r\n      toolGroupService.destroy();\r\n      syncGroupService.destroy();\r\n      segmentationService.destroy();\r\n      cornerstoneViewportService.destroy();\r\n    },\r\n    validationTags: {\r\n      study: [],\r\n      series: [],\r\n    },\r\n    isValidMode: ({ modalities, study }) => {\r\n      const modalities_list = modalities.split('\\\\');\r\n      const invalidModalities = ['SM'];\r\n\r\n      const isValid =\r\n        modalities_list.includes('CT') &&\r\n        modalities_list.includes('PT') &&\r\n        !invalidModalities.some(modality =>\r\n          modalities_list.includes(modality)\r\n        ) &&\r\n        // This is study is a 4D study with PT and CT and not a 3D study for the tmtv\r\n        // mode, until we have a better way to identify 4D studies we will use the\r\n        // StudyInstanceUID to identify the study\r\n        // Todo: when we add the 4D mode which comes with a mechanism to identify\r\n        // 4D studies we can use that\r\n        study.studyInstanceUid !==\r\n          '1.3.6.1.4.1.12842.1.1.14.3.20220915.105557.468.2963630849';\r\n\r\n      // there should be both CT and PT modalities and the modality should not be SM\r\n      return isValid;\r\n    },\r\n    routes: [\r\n      {\r\n        path: 'tmtv',\r\n        /*init: ({ servicesManager, extensionManager }) => {\r\n          //defaultViewerRouteInit\r\n        },*/\r\n        layoutTemplate: ({ location, servicesManager }) => {\r\n          return {\r\n            id: ohif.layout,\r\n            props: {\r\n              // leftPanels: [ohif.thumbnailList],\r\n              rightPanels: [tmtv.ROIThresholdPanel, tmtv.petSUV],\r\n              viewports: [\r\n                {\r\n                  namespace: cs3d.viewport,\r\n                  displaySetsToDisplay: [ohif.sopClassHandler],\r\n                },\r\n              ],\r\n            },\r\n          };\r\n        },\r\n      },\r\n    ],\r\n    extensions: extensionDependencies,\r\n    hangingProtocol: tmtv.hangingProtocol,\r\n    sopClassHandlers: [ohif.sopClassHandler],\r\n    hotkeys: [...hotkeys.defaults.hotkeyBindings],\r\n  };\r\n}\r\n\r\nconst mode = {\r\n  id,\r\n  modeFactory,\r\n  extensionDependencies,\r\n};\r\n\r\nexport default mode;\r\n","import { toolGroupIds } from '../initToolGroups';\r\n\r\nexport default function setCrosshairsConfiguration(\r\n  matches,\r\n  toolNames,\r\n  toolGroupService,\r\n  displaySetService\r\n) {\r\n  const matchDetails = matches.get('ctDisplaySet');\r\n\r\n  if (!matchDetails) {\r\n    return;\r\n  }\r\n\r\n  const { SeriesInstanceUID } = matchDetails;\r\n  const displaySets = displaySetService.getDisplaySetsForSeries(\r\n    SeriesInstanceUID\r\n  );\r\n\r\n  const toolConfig = toolGroupService.getToolConfiguration(\r\n    toolGroupIds.Fusion,\r\n    toolNames.Crosshairs\r\n  );\r\n\r\n  const crosshairsConfig = {\r\n    ...toolConfig,\r\n    filterActorUIDsToSetSlabThickness: [displaySets[0].displaySetInstanceUID],\r\n  };\r\n\r\n  toolGroupService.setToolConfiguration(\r\n    toolGroupIds.Fusion,\r\n    toolNames.Crosshairs,\r\n    crosshairsConfig\r\n  );\r\n}\r\n","import { toolGroupIds } from '../initToolGroups';\r\n\r\nexport default function setFusionActiveVolume(\r\n  matches,\r\n  toolNames,\r\n  toolGroupService,\r\n  displaySetService\r\n) {\r\n  const matchDetails = matches.get('ptDisplaySet');\r\n\r\n  if (!matchDetails) {\r\n    return;\r\n  }\r\n\r\n  const { SeriesInstanceUID } = matchDetails;\r\n\r\n  const displaySets = displaySetService.getDisplaySetsForSeries(\r\n    SeriesInstanceUID\r\n  );\r\n\r\n  if (!displaySets || displaySets.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const wlToolConfig = toolGroupService.getToolConfiguration(\r\n    toolGroupIds.Fusion,\r\n    toolNames.WindowLevel\r\n  );\r\n\r\n  const ellipticalToolConfig = toolGroupService.getToolConfiguration(\r\n    toolGroupIds.Fusion,\r\n    toolNames.EllipticalROI\r\n  );\r\n\r\n  // Todo: this should not take into account the loader id\r\n  const volumeId = `cornerstoneStreamingImageVolume:${displaySets[0].displaySetInstanceUID}`;\r\n\r\n  const windowLevelConfig = {\r\n    ...wlToolConfig,\r\n    volumeId,\r\n  };\r\n\r\n  const ellipticalROIConfig = {\r\n    ...ellipticalToolConfig,\r\n    volumeId,\r\n  };\r\n\r\n  toolGroupService.setToolConfiguration(\r\n    toolGroupIds.Fusion,\r\n    toolNames.WindowLevel,\r\n    windowLevelConfig\r\n  );\r\n\r\n  toolGroupService.setToolConfiguration(\r\n    toolGroupIds.Fusion,\r\n    toolNames.EllipticalROI,\r\n    ellipticalROIConfig\r\n  );\r\n}\r\n"],"names":["toolGroupIds","CT","PT","Fusion","MIP","default","toolNames","Enums","toolGroupService","commandsManager","tools","active","toolName","WindowLevel","bindings","mouseButton","MouseBindings","Primary","Pan","Auxiliary","Zoom","Secondary","StackScrollMouseWheel","passive","Length","ArrowAnnotate","Bidirectional","DragProbe","Probe","EllipticalROI","RectangleROI","StackScroll","Angle","CobbAngle","Magnify","enabled","SegmentationDisplay","disabled","Crosshairs","toolsConfig","viewportIndicators","autoPan","panSize","getTextCallback","callback","eventDetails","runCommand","changeTextCallback","data","createToolGroupAndAddTools","mipTools","VolumeRotateMouseWheel","MipJumpToClick","mipToolsConfig","rotateIncrementDegrees","targetViewportIds","_initToolGroups","windowLevelPresets","defaults","_createButton","type","id","icon","label","commands","tooltip","_createColormap","colormap","toString","title","subtitle","commandName","commandOptions","toolGroupId","bind","_createToolButton","_createWwwcPreset","preset","context","_createCommands","map","props","groupId","isRadio","primary","secondary","isActive","items","protocolId","isAction","renderer","WindowLevelMenuItem","text","viewportId","packageJson","MetadataProvider","classes","ohif","cs3d","tmtv","extensionDependencies","unsubscriptions","modeFactory","_ref","modeConfiguration","routeName","displayName","onModeEnter","_ref2","servicesManager","extensionManager","toolbarService","hangingProtocolService","displaySetService","services","utilityModule","getModuleEntry","exports","initToolGroups","unsubscribe","subscribe","EVENTS","VIEWPORT_ADDED","displaySetMatchDetails","getMatchDetails","matches","matchDetails","get","SeriesInstanceUID","displaySets","getDisplaySetsForSeries","crosshairsConfig","getToolConfiguration","filterActorUIDsToSetSlabThickness","displaySetInstanceUID","setToolConfiguration","setCrosshairsConfiguration","length","wlToolConfig","ellipticalToolConfig","volumeId","windowLevelConfig","ellipticalROIConfig","setFusionActiveVolume","recordInteraction","itemId","interactionType","push","init","addButtons","toolbarButtons","createButtonSection","addCustomAttribute","ptDisplaySet","find","imageSet","Modality","imageId","images","imageIdScalingFactor","suvbw","windowWidth","windowCenter","onModeExit","_ref3","syncGroupService","segmentationService","cornerstoneViewportService","forEach","destroy","validationTags","study","series","isValidMode","_ref4","modalities","modalities_list","split","includes","some","modality","studyInstanceUid","routes","path","layoutTemplate","_ref5","location","rightPanels","viewports","namespace","displaySetsToDisplay","extensions","hangingProtocol","sopClassHandlers","hotkeys","hotkeyBindings"],"sourceRoot":""}