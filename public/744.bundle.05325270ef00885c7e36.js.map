{"version":3,"file":"744.bundle.05325270ef00885c7e36.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/measurementTrackingMachine.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptBeginTracking.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewSeries.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewStudy.js","webpack:///../../../extensions/measurement-tracking/src/_shared/createReportAsync.tsx","webpack:///../../../extensions/measurement-tracking/src/_shared/PROMPT_RESPONSES.js","webpack:///../../../extensions/measurement-tracking/src/_shared/getNextSRSeriesNumber.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptSaveReport.js","webpack:///../../../extensions/measurement-tracking/src/_shared/createReportDialogPrompt.tsx","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptHydrateStructuredReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/hydrateStructuredReport.tsx","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/TrackedMeasurementsContext.tsx","webpack:///../../../extensions/measurement-tracking/src/getContextModule.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/PanelStudyBrowserTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/getImageSrcFromImageId.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/requestDisplaySetCreationForStudy.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking/ActionButtons.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/getPanelModule.tsx","webpack:///../../../extensions/measurement-tracking/src/getViewportModule.tsx","webpack:///../../../extensions/measurement-tracking/src/index.tsx","webpack:///../../../extensions/measurement-tracking/src/id.js"],"sourcesContent":["import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\nimport { assign } from 'xstate';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nconst machineConfiguration = {\r\n  id: 'measurementTracking',\r\n  initial: 'idle',\r\n  context: {\r\n    trackedStudy: '',\r\n    trackedSeries: [],\r\n    ignoredSeries: [],\r\n    //\r\n    prevTrackedStudy: '',\r\n    prevTrackedSeries: [],\r\n    prevIgnoredSeries: [],\r\n    //\r\n    ignoredSRSeriesForHydration: [],\r\n    isDirty: false,\r\n  },\r\n  states: {\r\n    off: {\r\n      type: 'final',\r\n    },\r\n    idle: {\r\n      entry: 'clearContext',\r\n      on: {\r\n        TRACK_SERIES: 'promptBeginTracking',\r\n        // Unused? We may only do PROMPT_HYDRATE_SR now?\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries', 'setIsDirtyToClean'],\r\n          },\r\n        ],\r\n        PROMPT_HYDRATE_SR: {\r\n          target: 'promptHydrateStructuredReport',\r\n          cond: 'hasNotIgnoredSRSeriesForHydration',\r\n        },\r\n        RESTORE_PROMPT_HYDRATE_SR: 'promptHydrateStructuredReport',\r\n        HYDRATE_SR: 'hydrateStructuredReport',\r\n      },\r\n    },\r\n    promptBeginTracking: {\r\n      invoke: {\r\n        src: 'promptBeginTracking',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndSeries', 'setIsDirty'],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'off',\r\n            cond: 'shouldKillMachine',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    tracking: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'isNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'isNewSeries',\r\n          },\r\n        ],\r\n        UNTRACK_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['removeTrackedSeries', 'setIsDirty'],\r\n            cond: 'hasRemainingTrackedSeries',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries'],\r\n          },\r\n        ],\r\n        SAVE_REPORT: 'promptSaveReport',\r\n        SET_DIRTY: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setIsDirty'],\r\n            cond: 'shouldSetDirty',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    promptTrackNewSeries: {\r\n      invoke: {\r\n        src: 'promptTrackNewSeries',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['addTrackedSeries', 'setIsDirty'],\r\n            cond: 'shouldAddSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptTrackNewStudy: {\r\n      invoke: {\r\n        src: 'promptTrackNewStudy',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: ['ignoreSeries'],\r\n            cond: 'shouldAddIgnoredSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptSaveReport: {\r\n      invoke: {\r\n        src: 'promptSaveReport',\r\n        onDone: [\r\n          // \"clicked the save button\"\r\n          // - should clear all measurements\r\n          // - show DICOM SR\r\n          {\r\n            target: 'idle',\r\n            actions: [\r\n              'clearAllMeasurements',\r\n              'showStructuredReportDisplaySetInActiveViewport',\r\n            ],\r\n            cond: 'shouldSaveAndContinueWithSameReport',\r\n          },\r\n          // \"starting a new report\"\r\n          // - remove \"just saved\" measurements\r\n          // - start tracking a new study + report\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n            ],\r\n            cond: 'shouldSaveAndStartNewReport',\r\n          },\r\n          // Cancel, back to tracking\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptHydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'promptHydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToFirstMeasurementInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n            cond: 'shouldHydrateStructuredReport',\r\n          },\r\n          {\r\n            target: 'idle',\r\n            actions: ['ignoreHydrationForSRSeries'],\r\n            cond: 'shouldIgnoreHydrationForSR',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    hydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'hydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToFirstMeasurementInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n  },\r\n  strict: true,\r\n};\r\n\r\nconst defaultOptions = {\r\n  services: {\r\n    promptBeginTracking: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewStudy: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewSeries: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n  },\r\n  actions: {\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      console.log('discardPreviouslyTrackedMeasurements: not implemented');\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      console.log('clearAllMeasurements: not implemented');\r\n    },\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      console.warn('jumpToFirstMeasurementInActiveViewport: not implemented');\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      console.warn(\r\n        'showStructuredReportDisplaySetInActiveViewport: not implemented'\r\n      );\r\n    },\r\n    clearContext: assign({\r\n      trackedStudy: '',\r\n      trackedSeries: [],\r\n      ignoredSeries: [],\r\n      prevTrackedStudy: '',\r\n      prevTrackedSeries: [],\r\n      prevIgnoredSeries: [],\r\n    }),\r\n    // Promise resolves w/ `evt.data.*`\r\n    setTrackedStudyAndSeries: assign((ctx, evt) => ({\r\n      prevTrackedStudy: ctx.trackedStudy,\r\n      prevTrackedSeries: ctx.trackedSeries.slice(),\r\n      prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n      //\r\n      trackedStudy: evt.data.StudyInstanceUID,\r\n      trackedSeries: [evt.data.SeriesInstanceUID],\r\n      ignoredSeries: [],\r\n    })),\r\n    setTrackedStudyAndMultipleSeries: assign((ctx, evt) => {\r\n      const studyInstanceUID =\r\n        evt.StudyInstanceUID || evt.data.StudyInstanceUID;\r\n      const seriesInstanceUIDs =\r\n        evt.SeriesInstanceUIDs || evt.data.SeriesInstanceUIDs;\r\n\r\n      return {\r\n        prevTrackedStudy: ctx.trackedStudy,\r\n        prevTrackedSeries: ctx.trackedSeries.slice(),\r\n        prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n        //\r\n        trackedStudy: studyInstanceUID,\r\n        trackedSeries: [...ctx.trackedSeries, ...seriesInstanceUIDs],\r\n        ignoredSeries: [],\r\n      };\r\n    }),\r\n    setIsDirtyToClean: assign((ctx, evt) => ({\r\n      isDirty: false,\r\n    })),\r\n    setIsDirty: assign((ctx, evt) => ({\r\n      isDirty: true,\r\n    })),\r\n    ignoreSeries: assign((ctx, evt) => ({\r\n      prevIgnoredSeries: [...ctx.ignoredSeries],\r\n      ignoredSeries: [...ctx.ignoredSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    ignoreHydrationForSRSeries: assign((ctx, evt) => ({\r\n      ignoredSRSeriesForHydration: [\r\n        ...ctx.ignoredSRSeriesForHydration,\r\n        evt.data.srSeriesInstanceUID,\r\n      ],\r\n    })),\r\n    addTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: [...ctx.trackedSeries],\r\n      trackedSeries: [...ctx.trackedSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    removeTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: ctx.trackedSeries\r\n        .slice()\r\n        .filter(ser => ser !== evt.SeriesInstanceUID),\r\n      trackedSeries: ctx.trackedSeries\r\n        .slice()\r\n        .filter(ser => ser !== evt.SeriesInstanceUID),\r\n    })),\r\n  },\r\n  guards: {\r\n    // We set dirty any time we performan an action that:\r\n    // - Tracks a new study\r\n    // - Tracks a new series\r\n    // - Adds a measurement to an already tracked study/series\r\n    //\r\n    // We set clean any time we restore from an SR\r\n    //\r\n    // This guard/condition is specific to \"new measurements\"\r\n    // to make sure we only track dirty when the new measurement is specific\r\n    // to a series we're already tracking\r\n    //\r\n    // tl;dr\r\n    // Any report change, that is not a hydration of an existing report, should\r\n    // result in a \"dirty\" report\r\n    //\r\n    // Where dirty means there would be \"loss of data\" if we blew away measurements\r\n    // without creating a new SR.\r\n    shouldSetDirty: (ctx, evt) => {\r\n      return (\r\n        // When would this happen?\r\n        evt.SeriesInstanceUID === undefined ||\r\n        ctx.trackedSeries.includes(evt.SeriesInstanceUID)\r\n      );\r\n    },\r\n    shouldKillMachine: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.NO_NEVER,\r\n    shouldAddSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.ADD_SERIES,\r\n    shouldSetStudyAndSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.SET_STUDY_AND_SERIES,\r\n    shouldAddIgnoredSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.NO_NOT_FOR_SERIES,\r\n    shouldPromptSaveReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.CREATE_REPORT,\r\n    shouldIgnoreHydrationForSR: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.CANCEL,\r\n    shouldSaveAndContinueWithSameReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === true,\r\n    shouldSaveAndStartNewReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === false,\r\n    shouldHydrateStructuredReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.HYDRATE_REPORT,\r\n    // Has more than 1, or SeriesInstanceUID is not in list\r\n    // --> Post removal would have non-empty trackedSeries array\r\n    hasRemainingTrackedSeries: (ctx, evt) =>\r\n      ctx.trackedSeries.length > 1 ||\r\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n    hasNotIgnoredSRSeriesForHydration: (ctx, evt) => {\r\n      return !ctx.ignoredSRSeriesForHydration.includes(evt.SeriesInstanceUID);\r\n    },\r\n    isNewStudy: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      ctx.trackedStudy !== evt.StudyInstanceUID,\r\n    isNewSeries: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n  },\r\n};\r\n\r\nexport { defaultOptions, machineConfiguration };\r\n","import { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n};\r\n\r\nfunction promptBeginTracking({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { uiViewportDialogService } = servicesManager.services;\r\n  const { viewportIndex, StudyInstanceUID, SeriesInstanceUID } = evt;\r\n\r\n  return new Promise(async function(resolve, reject) {\r\n    let promptResult = await _askTrackMeasurements(\r\n      uiViewportDialogService,\r\n      viewportIndex\r\n    );\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportIndex,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message = 'Track measurements for this series?';\r\n    const actions = [\r\n      {\r\n        id: 'prompt-begin-tracking-cancel',\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-no-do-not-ask-again',\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'No, do not ask again',\r\n        value: RESPONSE.NO_NEVER,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-yes',\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Yes',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportIndex,\r\n      id: 'measurement-tracking-prompt-begin-tracking',\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptBeginTracking;\r\n","import { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { UIViewportDialogService } = servicesManager.services;\r\n  const { viewportIndex, StudyInstanceUID, SeriesInstanceUID } = evt;\r\n\r\n  return new Promise(async function(resolve, reject) {\r\n    let promptResult = await _askShouldAddMeasurements(\r\n      UIViewportDialogService,\r\n      viewportIndex\r\n    );\r\n\r\n    if (promptResult === RESPONSE.CREATE_REPORT) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, viewportIndex)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportIndex,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askShouldAddMeasurements(uiViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message =\r\n      'Do you want to add this measurement to the existing report?';\r\n    const actions = [\r\n      {\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'Cancel',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Create new report',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Add to existing report',\r\n        value: RESPONSE.ADD_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportIndex,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message =\r\n      'You have existing tracked measurements. What would you like to do with your existing tracked measurements?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'Save',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Discard',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportIndex,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewSeries;\r\n","const RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewStudy({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { UIViewportDialogService } = servicesManager.services;\r\n  const { viewportIndex, StudyInstanceUID, SeriesInstanceUID } = evt;\r\n\r\n  return new Promise(async function(resolve, reject) {\r\n    let promptResult = await _askTrackMeasurements(\r\n      UIViewportDialogService,\r\n      viewportIndex\r\n    );\r\n\r\n    if (promptResult === RESPONSE.SET_STUDY_AND_SERIES) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, viewportIndex)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportIndex,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(UIViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message = 'Track measurements for this series?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'No', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'No, do not ask again for this series',\r\n        value: RESPONSE.NO_NOT_FOR_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportIndex,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message =\r\n      'Measurements cannot span across multiple studies. Do you want to save your tracked measurements?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'No, discard previously tracked series & measurements',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportIndex,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewStudy;\r\n","import React from 'react';\r\nimport { DicomMetadataStore } from '@ohif/core';\r\n\r\n/**\r\n *\r\n * @param {*} servicesManager\r\n * @param {*} dataSource\r\n * @param {*} measurements\r\n * @param {*} options\r\n * @returns {string[]} displaySetInstanceUIDs\r\n */\r\nasync function createReportAsync(\r\n  servicesManager,\r\n  commandsManager,\r\n  dataSource,\r\n  measurements,\r\n  options\r\n) {\r\n  const {\r\n    displaySetService,\r\n    uiNotificationService,\r\n    uiDialogService,\r\n  } = servicesManager.services;\r\n  const loadingDialogId = uiDialogService.create({\r\n    showOverlay: true,\r\n    isDraggable: false,\r\n    centralize: true,\r\n    // TODO: Create a loading indicator component + zeplin design?\r\n    content: Loading,\r\n  });\r\n\r\n  try {\r\n    const naturalizedReport = await commandsManager.runCommand(\r\n      'storeMeasurements',\r\n      {\r\n        measurementData: measurements,\r\n        dataSource,\r\n        additionalFindingTypes: ['ArrowAnnotate'],\r\n        options,\r\n      },\r\n      'CORNERSTONE_STRUCTURED_REPORT'\r\n    );\r\n\r\n    // The \"Mode\" route listens for DicomMetadataStore changes\r\n    // When a new instance is added, it listens and\r\n    // automatically calls makeDisplaySets\r\n    DicomMetadataStore.addInstances([naturalizedReport], true);\r\n\r\n    const displaySetInstanceUID = displaySetService.getMostRecentDisplaySet();\r\n\r\n    uiNotificationService.show({\r\n      title: 'Create Report',\r\n      message: 'Measurements saved successfully',\r\n      type: 'success',\r\n    });\r\n\r\n    return [displaySetInstanceUID];\r\n  } catch (error) {\r\n    uiNotificationService.show({\r\n      title: 'Create Report',\r\n      message: error.message || 'Failed to store measurements',\r\n      type: 'error',\r\n    });\r\n  } finally {\r\n    uiDialogService.dismiss({ id: loadingDialogId });\r\n  }\r\n}\r\n\r\nfunction Loading() {\r\n  return <div className=\"text-primary-active\">Loading...</div>;\r\n}\r\n\r\nexport default createReportAsync;\r\n","const RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nexport default RESPONSE;\r\n","const MIN_SR_SERIES_NUMBER = 4700;\r\n\r\nexport default function getNextSRSeriesNumber(displaySetService) {\r\n  const activeDisplaySets = displaySetService.getActiveDisplaySets();\r\n  const srDisplaySets = activeDisplaySets.filter(ds => ds.Modality === 'SR');\r\n  const srSeriesNumbers = srDisplaySets.map(ds => ds.SeriesNumber);\r\n  const maxSeriesNumber = Math.max(...srSeriesNumbers, MIN_SR_SERIES_NUMBER);\r\n\r\n  return maxSeriesNumber + 1;\r\n}\r\n","import createReportAsync from './../../_shared/createReportAsync';\r\nimport createReportDialogPrompt from '../../_shared/createReportDialogPrompt';\r\nimport getNextSRSeriesNumber from '../../_shared/getNextSRSeriesNumber';\r\nimport RESPONSE from '../../_shared/PROMPT_RESPONSES';\r\n\r\nfunction promptSaveReport(\r\n  { servicesManager, commandsManager, extensionManager },\r\n  ctx,\r\n  evt\r\n) {\r\n  const {\r\n    uiDialogService,\r\n    measurementService,\r\n    displaySetService,\r\n  } = servicesManager.services;\r\n  const viewportIndex =\r\n    evt.viewportIndex === undefined\r\n      ? evt.data.viewportIndex\r\n      : evt.viewportIndex;\r\n  const isBackupSave =\r\n    evt.isBackupSave === undefined ? evt.data.isBackupSave : evt.isBackupSave;\r\n  const StudyInstanceUID = evt?.data?.StudyInstanceUID;\r\n  const SeriesInstanceUID = evt?.data?.SeriesInstanceUID;\r\n\r\n  const { trackedStudy, trackedSeries } = ctx;\r\n  let displaySetInstanceUIDs;\r\n\r\n  return new Promise(async function(resolve, reject) {\r\n    // TODO: Fallback if (uiDialogService) {\r\n    const promptResult = await createReportDialogPrompt(uiDialogService);\r\n\r\n    if (promptResult.action === RESPONSE.CREATE_REPORT) {\r\n      const dataSources = extensionManager.getDataSources();\r\n      const dataSource = dataSources[0];\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m =>\r\n          trackedStudy === m.referenceStudyUID &&\r\n          trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      const SeriesDescription =\r\n        // isUndefinedOrEmpty\r\n        promptResult.value === undefined || promptResult.value === ''\r\n          ? 'Research Derived Series' // default\r\n          : promptResult.value; // provided value\r\n\r\n      const SeriesNumber = getNextSRSeriesNumber(displaySetService);\r\n\r\n      displaySetInstanceUIDs = await createReportAsync(\r\n        servicesManager,\r\n        commandsManager,\r\n        dataSource,\r\n        trackedMeasurements,\r\n        {\r\n          SeriesDescription,\r\n          SeriesNumber,\r\n        }\r\n      );\r\n    } else if (promptResult.action === RESPONSE.CANCEL) {\r\n      // Do nothing\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult.action,\r\n      createdDisplaySetInstanceUIDs: displaySetInstanceUIDs,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportIndex,\r\n      isBackupSave,\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptSaveReport;\r\n","/* eslint-disable react/display-name */\r\nimport React from 'react';\r\nimport { ButtonEnums, Dialog, Input } from '@ohif/ui';\r\nimport RESPONSE from './PROMPT_RESPONSES';\r\n\r\nexport default function createReportDialogPrompt(uiDialogService) {\r\n  return new Promise(function(resolve, reject) {\r\n    let dialogId = undefined;\r\n\r\n    const _handleClose = () => {\r\n      // Dismiss dialog\r\n      uiDialogService.dismiss({ id: dialogId });\r\n      // Notify of cancel action\r\n      resolve({ action: RESPONSE.CANCEL, value: undefined });\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {string} param0.action - value of action performed\r\n     * @param {string} param0.value - value from input field\r\n     */\r\n    const _handleFormSubmit = ({ action, value }) => {\r\n      switch (action.id) {\r\n        case 'save':\r\n          // Only save if description is not blank otherwise ignore\r\n          if (value.label && value.label.trim() !== '') {\r\n            resolve({\r\n              action: RESPONSE.CREATE_REPORT,\r\n              value: value.label.trim(),\r\n            });\r\n            uiDialogService.dismiss({ id: dialogId });\r\n          }\r\n          break;\r\n        case 'cancel':\r\n          uiDialogService.dismiss({ id: dialogId });\r\n          resolve({ action: RESPONSE.CANCEL, value: undefined });\r\n          break;\r\n      }\r\n    };\r\n\r\n    dialogId = uiDialogService.create({\r\n      centralize: true,\r\n      isDraggable: false,\r\n      content: Dialog,\r\n      useLastPosition: false,\r\n      showOverlay: true,\r\n      contentProps: {\r\n        title: 'Create Report',\r\n        value: { label: '' },\r\n        noCloseButton: true,\r\n        onClose: _handleClose,\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\r\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\r\n        ],\r\n        // TODO: Should be on button press...\r\n        onSubmit: _handleFormSubmit,\r\n        body: ({ value, setValue }) => {\r\n          const onChangeHandler = event => {\r\n            event.persist();\r\n            setValue(value => ({ ...value, label: event.target.value }));\r\n          };\r\n          const onKeyPressHandler = event => {\r\n            if (event.key === 'Enter') {\r\n              // Trigger form submit\r\n              _handleFormSubmit({ action: { id: 'save' }, value });\r\n            }\r\n          };\r\n          return (\r\n            <div className=\"\">\r\n              <Input\r\n                label=\"Enter the report name\"\r\n                labelClassName=\"text-white grow leading-[1.2] text-[14px]\"\r\n                autoFocus\r\n                className=\"bg-black border-primary-main grow\"\r\n                type=\"text\"\r\n                value={value.label}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    });\r\n  });\r\n}\r\n","import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\nimport { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nfunction promptHydrateStructuredReport(\r\n  { servicesManager, extensionManager },\r\n  ctx,\r\n  evt\r\n) {\r\n  const {\r\n    uiViewportDialogService,\r\n    displaySetService,\r\n  } = servicesManager.services;\r\n  const { viewportIndex, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(\r\n    displaySetInstanceUID\r\n  );\r\n\r\n  return new Promise(async function(resolve, reject) {\r\n    const promptResult = await _askTrackMeasurements(\r\n      uiViewportDialogService,\r\n      viewportIndex\r\n    );\r\n\r\n    // Need to do action here... So we can set state...\r\n    let StudyInstanceUID, SeriesInstanceUIDs;\r\n\r\n    if (promptResult === RESPONSE.HYDRATE_REPORT) {\r\n      console.warn('!! HYDRATING STRUCTURED REPORT');\r\n      const hydrationResult = hydrateStructuredReport(\r\n        { servicesManager, extensionManager },\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n      SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportIndex,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message =\r\n      'Do you want to continue tracking measurements for this study?';\r\n    const actions = [\r\n      {\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Yes',\r\n        value: RESPONSE.HYDRATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportIndex,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHydrateStructuredReport;\r\n","import { hydrateStructuredReport as baseHydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\n\r\nfunction hydrateStructuredReport(\r\n  { servicesManager, extensionManager },\r\n  ctx,\r\n  evt\r\n) {\r\n  const { displaySetService } = servicesManager.services;\r\n  const { viewportIndex, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(\r\n    displaySetInstanceUID\r\n  );\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const hydrationResult = baseHydrateStructuredReport(\r\n      { servicesManager, extensionManager },\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    const StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n    const SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n\r\n    resolve({\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportIndex,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nexport default hydrateStructuredReport;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Machine } from 'xstate';\r\nimport { useMachine } from '@xstate/react';\r\nimport { useViewportGrid } from '@ohif/ui';\r\nimport {\r\n  machineConfiguration,\r\n  defaultOptions,\r\n} from './measurementTrackingMachine';\r\nimport promptBeginTracking from './promptBeginTracking';\r\nimport promptTrackNewSeries from './promptTrackNewSeries';\r\nimport promptTrackNewStudy from './promptTrackNewStudy';\r\nimport promptSaveReport from './promptSaveReport';\r\nimport promptHydrateStructuredReport from './promptHydrateStructuredReport';\r\nimport hydrateStructuredReport from './hydrateStructuredReport';\r\n\r\nconst TrackedMeasurementsContext = React.createContext();\r\nTrackedMeasurementsContext.displayName = 'TrackedMeasurementsContext';\r\nconst useTrackedMeasurements = () => useContext(TrackedMeasurementsContext);\r\n\r\nconst SR_SOPCLASSHANDLERID =\r\n  '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr';\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction TrackedMeasurementsContextProvider(\r\n  { servicesManager, commandsManager, extensionManager }, // Bound by consumer\r\n  { children } // Component props\r\n) {\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const { activeViewportIndex, viewports } = viewportGrid;\r\n  const { measurementService, displaySetService } = servicesManager.services;\r\n\r\n  const machineOptions = Object.assign({}, defaultOptions);\r\n  machineOptions.actions = Object.assign({}, machineOptions.actions, {\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries } = ctx;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m =>\r\n          trackedStudy === m.referenceStudyUID &&\r\n          trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      console.log(\r\n        'jumping to measurement reset viewport',\r\n        viewportGrid.activeViewportIndex,\r\n        trackedMeasurements[0]\r\n      );\r\n\r\n      const referencedDisplaySetUID =\r\n        trackedMeasurements[0].displaySetInstanceUID;\r\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(\r\n        referencedDisplaySetUID\r\n      );\r\n\r\n      const referencedImages = referencedDisplaySet.images;\r\n      const isVolumeIdReferenced = referencedImages[0].imageId.startsWith(\r\n        'volumeId'\r\n      );\r\n\r\n      const measurementData = trackedMeasurements[0].data;\r\n\r\n      let imageIndex = 0;\r\n      if (!isVolumeIdReferenced && measurementData) {\r\n        // if it is imageId referenced find the index of the imageId, we don't have\r\n        // support for volumeId referenced images yet\r\n        imageIndex = referencedImages.findIndex(image => {\r\n          const imageIdToUse = Object.keys(measurementData)[0].substring(8);\r\n          return image.imageId === imageIdToUse;\r\n        });\r\n\r\n        if (imageIndex === -1) {\r\n          console.warn(\r\n            'Could not find image index for tracked measurement, using 0'\r\n          );\r\n          imageIndex = 0;\r\n        }\r\n      }\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportIndex: viewportGrid.activeViewportIndex,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n        viewportOptions: {\r\n          initialImageOptions: {\r\n            index: imageIndex,\r\n          },\r\n        },\r\n      });\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      if (evt.data.createdDisplaySetInstanceUIDs.length > 0) {\r\n        const StructuredReportDisplaySetInstanceUID =\r\n          evt.data.createdDisplaySetInstanceUIDs[0].displaySetInstanceUID;\r\n\r\n        viewportGridService.setDisplaySetsForViewport({\r\n          viewportIndex: evt.data.viewportIndex,\r\n          displaySetInstanceUIDs: [StructuredReportDisplaySetInstanceUID],\r\n        });\r\n      }\r\n    },\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const filteredMeasurements = measurements.filter(ms =>\r\n        ctx.prevTrackedSeries.includes(ms.referenceSeriesUID)\r\n      );\r\n      const measurementIds = filteredMeasurements.map(fm => fm.id);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const measurementIds = measurements.map(fm => fm.uid);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n  });\r\n  machineOptions.services = Object.assign({}, machineOptions.services, {\r\n    promptBeginTracking: promptBeginTracking.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n    }),\r\n    promptTrackNewSeries: promptTrackNewSeries.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n    }),\r\n    promptTrackNewStudy: promptTrackNewStudy.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n    }),\r\n    promptSaveReport: promptSaveReport.bind(null, {\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n    }),\r\n    promptHydrateStructuredReport: promptHydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n    }),\r\n    hydrateStructuredReport: hydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n    }),\r\n  });\r\n\r\n  // TODO: IMPROVE\r\n  // - Add measurement_updated to cornerstone; debounced? (ext side, or consumption?)\r\n  // - Friendlier transition/api in front of measurementTracking machine?\r\n  // - Blocked: viewport overlay shouldn't clip when resized\r\n  // TODO: PRIORITY\r\n  // - Fix \"ellipses\" series description dynamic truncate length\r\n  // - Fix viewport border resize\r\n  // - created/destroyed hooks for extensions (cornerstone measurement subscriptions in it's `init`)\r\n\r\n  const measurementTrackingMachine = Machine(\r\n    machineConfiguration,\r\n    machineOptions\r\n  );\r\n\r\n  const [\r\n    trackedMeasurements,\r\n    sendTrackedMeasurementsEvent,\r\n    trackedMeasurementsService,\r\n  ] = useMachine(measurementTrackingMachine);\r\n\r\n  // ~~ Listen for changes to ViewportGrid for potential SRs hung in panes when idle\r\n  useEffect(() => {\r\n    if (viewports.length > 0) {\r\n      const activeViewport = viewports[activeViewportIndex];\r\n\r\n      if (!activeViewport || !activeViewport?.displaySetInstanceUIDs?.length) {\r\n        return;\r\n      }\r\n\r\n      // Todo: Getting the first displaySetInstanceUID is wrong, but we don't have\r\n      // tracking fusion viewports yet. This should change when we do.\r\n      const { displaySetService } = servicesManager.services;\r\n      const displaySet = displaySetService.getDisplaySetByUID(\r\n        activeViewport.displaySetInstanceUIDs[0]\r\n      );\r\n\r\n      if (!displaySet) {\r\n        return;\r\n      }\r\n\r\n      // If this is an SR produced by our SR SOPClassHandler,\r\n      // and it hasn't been loaded yet, do that now so we\r\n      // can check if it can be rehydrated or not.\r\n      //\r\n      // Note: This happens:\r\n      // - If the viewport is not currently an OHIFCornerstoneSRViewport\r\n      // - If the displaySet has never been hung\r\n      //\r\n      // Otherwise, the displaySet will be loaded by the useEffect handler\r\n      // listening to displaySet changes inside OHIFCornerstoneSRViewport.\r\n      // The issue here is that this handler in TrackedMeasurementsContext\r\n      // ends up occurring before the Viewport is created, so the displaySet\r\n      // is not loaded yet, and isRehydratable is undefined unless we call load().\r\n      if (\r\n        displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n        !displaySet.isLoaded &&\r\n        displaySet.load\r\n      ) {\r\n        displaySet.load();\r\n      }\r\n\r\n      // Magic string\r\n      // load function added by our sopClassHandler module\r\n      if (\r\n        displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n        displaySet.isRehydratable === true\r\n      ) {\r\n        console.log('sending event...', trackedMeasurements);\r\n        sendTrackedMeasurementsEvent('PROMPT_HYDRATE_SR', {\r\n          displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n          SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n          viewportIndex: activeViewportIndex,\r\n        });\r\n      }\r\n    }\r\n  }, [\r\n    activeViewportIndex,\r\n    sendTrackedMeasurementsEvent,\r\n    servicesManager.services,\r\n    viewports,\r\n  ]);\r\n\r\n  return (\r\n    <TrackedMeasurementsContext.Provider\r\n      value={[trackedMeasurements, sendTrackedMeasurementsEvent]}\r\n    >\r\n      {children}\r\n    </TrackedMeasurementsContext.Provider>\r\n  );\r\n}\r\n\r\nTrackedMeasurementsContextProvider.propTypes = {\r\n  children: PropTypes.oneOf([PropTypes.func, PropTypes.node]),\r\n  servicesManager: PropTypes.object.isRequired,\r\n  commandsManager: PropTypes.object.isRequired,\r\n  extensionManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport {\r\n  TrackedMeasurementsContext,\r\n  TrackedMeasurementsContextProvider,\r\n  useTrackedMeasurements,\r\n};\r\n","import {\r\n  TrackedMeasurementsContext,\r\n  TrackedMeasurementsContextProvider,\r\n  useTrackedMeasurements,\r\n} from './contexts';\r\n\r\nfunction getContextModule({\r\n  servicesManager,\r\n  extensionManager,\r\n  commandsManager,\r\n}) {\r\n  const BoundTrackedMeasurementsContextProvider = TrackedMeasurementsContextProvider.bind(\r\n    null,\r\n    { servicesManager, extensionManager, commandsManager }\r\n  );\r\n\r\n  return [\r\n    {\r\n      name: 'TrackedMeasurementsContext',\r\n      context: TrackedMeasurementsContext,\r\n      provider: BoundTrackedMeasurementsContextProvider,\r\n    },\r\n  ];\r\n}\r\n\r\nexport { useTrackedMeasurements };\r\nexport default getContextModule;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { utils } from '@ohif/core';\r\nimport {\r\n  StudyBrowser,\r\n  useImageViewer,\r\n  useViewportGrid,\r\n  Dialog,\r\n  ButtonEnums,\r\n} from '@ohif/ui';\r\nimport { useTrackedMeasurements } from '../../getContextModule';\r\n\r\nconst { formatDate } = utils;\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction PanelStudyBrowserTracking({\r\n  servicesManager,\r\n  getImageSrc,\r\n  getStudiesForPatientByMRN,\r\n  requestDisplaySetCreationForStudy,\r\n  dataSource,\r\n}) {\r\n  const {\r\n    measurementService,\r\n    displaySetService,\r\n    uiDialogService,\r\n    hangingProtocolService,\r\n    uiNotificationService,\r\n  } = servicesManager.services;\r\n\r\n  // Normally you nest the components so the tree isn't so deep, and the data\r\n  // doesn't have to have such an intense shape. This works well enough for now.\r\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\r\n  const { StudyInstanceUIDs } = useImageViewer();\r\n  const [\r\n    { activeViewportIndex, viewports, numCols, numRows },\r\n    viewportGridService,\r\n  ] = useViewportGrid();\r\n  const [\r\n    trackedMeasurements,\r\n    sendTrackedMeasurementsEvent,\r\n  ] = useTrackedMeasurements();\r\n  const [activeTabName, setActiveTabName] = useState('primary');\r\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\r\n    ...StudyInstanceUIDs,\r\n  ]);\r\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\r\n  const [displaySets, setDisplaySets] = useState([]);\r\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\r\n  const [jumpToDisplaySet, setJumpToDisplaySet] = useState(null);\r\n\r\n  const onDoubleClickThumbnailHandler = displaySetInstanceUID => {\r\n    let updatedViewports = [];\r\n    const viewportIndex = activeViewportIndex;\r\n    try {\r\n      updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n        viewportIndex,\r\n        displaySetInstanceUID\r\n      );\r\n    } catch (error) {\r\n      console.warn(error);\r\n      uiNotificationService.show({\r\n        title: 'Thumbnail Double Click',\r\n        message:\r\n          'The selected display sets could not be added to the viewport due to a mismatch in the Hanging Protocol rules.',\r\n        type: 'info',\r\n        duration: 3000,\r\n      });\r\n    }\r\n\r\n    viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n  };\r\n\r\n  const activeViewportDisplaySetInstanceUIDs =\r\n    viewports[activeViewportIndex]?.displaySetInstanceUIDs;\r\n\r\n  useEffect(() => {\r\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\r\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\r\n    const subscriptions = [];\r\n\r\n    [added, addedRaw].forEach(evt => {\r\n      subscriptions.push(\r\n        measurementService.subscribe(evt, ({ source, measurement }) => {\r\n          const {\r\n            referenceSeriesUID: SeriesInstanceUID,\r\n            referenceStudyUID: StudyInstanceUID,\r\n          } = measurement;\r\n\r\n          sendTrackedMeasurementsEvent('SET_DIRTY', { SeriesInstanceUID });\r\n          sendTrackedMeasurementsEvent('TRACK_SERIES', {\r\n            viewportIndex: activeViewportIndex,\r\n            StudyInstanceUID,\r\n            SeriesInstanceUID,\r\n          });\r\n        }).unsubscribe\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, [measurementService, activeViewportIndex, sendTrackedMeasurementsEvent]);\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  // ~~ studyDisplayList\r\n  useEffect(() => {\r\n    // Fetch all studies for the patient in each primary study\r\n    async function fetchStudiesForPatient(StudyInstanceUID) {\r\n      // current study qido\r\n      const qidoForStudyUID = await dataSource.query.studies.search({\r\n        studyInstanceUid: StudyInstanceUID,\r\n      });\r\n\r\n      let qidoStudiesForPatient = qidoForStudyUID;\r\n\r\n      // try to fetch the prior studies based on the patientID if the\r\n      // server can respond.\r\n      try {\r\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(\r\n          qidoForStudyUID\r\n        );\r\n      } catch (error) {\r\n        console.warn(error);\r\n      }\r\n\r\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\r\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\r\n        return {\r\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\r\n          date: formatDate(qidoStudy.StudyDate),\r\n          description: qidoStudy.StudyDescription,\r\n          modalities: qidoStudy.ModalitiesInStudy,\r\n          numInstances: qidoStudy.NumInstances,\r\n        };\r\n      });\r\n\r\n      setStudyDisplayList(prevArray => {\r\n        const ret = [...prevArray];\r\n        for (const study of actuallyMappedStudies) {\r\n          if (\r\n            !prevArray.find(\r\n              it => it.studyInstanceUid === study.studyInstanceUid\r\n            )\r\n          ) {\r\n            ret.push(study);\r\n          }\r\n        }\r\n        return ret;\r\n      });\r\n    }\r\n\r\n    StudyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [StudyInstanceUIDs, getStudiesForPatientByMRN]);\r\n\r\n  // ~~ Initial Thumbnails\r\n  useEffect(() => {\r\n    const currentDisplaySets = displaySetService.activeDisplaySets;\r\n\r\n    if (!currentDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    currentDisplaySets.forEach(async dSet => {\r\n      const newImageSrcEntry = {};\r\n      const displaySet = displaySetService.getDisplaySetByUID(\r\n        dSet.displaySetInstanceUID\r\n      );\r\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\r\n      const imageId = imageIds[Math.floor(imageIds.length / 2)];\r\n\r\n      // TODO: Is it okay that imageIds are not returned here for SR displaysets?\r\n      if (imageId) {\r\n        // When the image arrives, render it and store the result in the thumbnailImgSrcMap\r\n        newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(\r\n          imageId\r\n        );\r\n        setThumbnailImageSrcMap(prevState => {\r\n          return { ...prevState, ...newImageSrcEntry };\r\n        });\r\n      }\r\n    });\r\n  }, [displaySetService, dataSource, getImageSrc]);\r\n\r\n  // ~~ displaySets\r\n  useEffect(() => {\r\n    const currentDisplaySets = displaySetService.activeDisplaySets;\r\n\r\n    if (!currentDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    const mappedDisplaySets = _mapDisplaySets(\r\n      currentDisplaySets,\r\n      thumbnailImageSrcMap,\r\n      trackedSeries,\r\n      viewports,\r\n      viewportGridService,\r\n      dataSource,\r\n      displaySetService,\r\n      uiDialogService,\r\n      uiNotificationService\r\n    );\r\n\r\n    setDisplaySets(mappedDisplaySets);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    displaySetService.activeDisplaySets,\r\n    trackedSeries,\r\n    viewports,\r\n    dataSource,\r\n    thumbnailImageSrcMap,\r\n  ]);\r\n\r\n  // ~~ subscriptions --> displaySets\r\n  useEffect(() => {\r\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\r\n    const SubscriptionDisplaySetsAdded = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\r\n      data => {\r\n        const { displaySetsAdded, options } = data;\r\n        displaySetsAdded.forEach(async dSet => {\r\n          const displaySetInstanceUID = dSet.displaySetInstanceUID;\r\n\r\n          const newImageSrcEntry = {};\r\n          const displaySet = displaySetService.getDisplaySetByUID(\r\n            displaySetInstanceUID\r\n          );\r\n\r\n          if (options.madeInClient) {\r\n            setJumpToDisplaySet(displaySetInstanceUID);\r\n          }\r\n\r\n          const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\r\n          const imageId = imageIds[Math.floor(imageIds.length / 2)];\r\n\r\n          // TODO: Is it okay that imageIds are not returned here for SR displaysets?\r\n          if (imageId) {\r\n            // When the image arrives, render it and store the result in the thumbnailImgSrcMap\r\n            newImageSrcEntry[displaySetInstanceUID] = await getImageSrc(\r\n              imageId\r\n            );\r\n            setThumbnailImageSrcMap(prevState => {\r\n              return { ...prevState, ...newImageSrcEntry };\r\n            });\r\n          }\r\n        });\r\n      }\r\n    );\r\n\r\n    // TODO: Will this always hold _all_ the displaySets we care about?\r\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\r\n    const SubscriptionDisplaySetsChanged = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_CHANGED,\r\n      changedDisplaySets => {\r\n        const mappedDisplaySets = _mapDisplaySets(\r\n          changedDisplaySets,\r\n          thumbnailImageSrcMap,\r\n          trackedSeries,\r\n          viewports,\r\n          viewportGridService,\r\n          dataSource,\r\n          displaySetService,\r\n          uiDialogService,\r\n          uiNotificationService\r\n        );\r\n\r\n        setDisplaySets(mappedDisplaySets);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      SubscriptionDisplaySetsAdded.unsubscribe();\r\n      SubscriptionDisplaySetsChanged.unsubscribe();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    displaySetService,\r\n    dataSource,\r\n    getImageSrc,\r\n    thumbnailImageSrcMap,\r\n    trackedSeries,\r\n    viewports,\r\n  ]);\r\n\r\n  const tabs = _createStudyBrowserTabs(\r\n    StudyInstanceUIDs,\r\n    studyDisplayList,\r\n    displaySets,\r\n    hangingProtocolService\r\n  );\r\n\r\n  // TODO: Should not fire this on \"close\"\r\n  function _handleStudyClick(StudyInstanceUID) {\r\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(\r\n      StudyInstanceUID\r\n    );\r\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\r\n      ? [\r\n          ...expandedStudyInstanceUIDs.filter(\r\n            stdyUid => stdyUid !== StudyInstanceUID\r\n          ),\r\n        ]\r\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\r\n\r\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\r\n\r\n    if (!shouldCollapseStudy) {\r\n      const madeInClient = true;\r\n      requestDisplaySetCreationForStudy(\r\n        displaySetService,\r\n        StudyInstanceUID,\r\n        madeInClient\r\n      );\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (jumpToDisplaySet) {\r\n      // Get element by displaySetInstanceUID\r\n      const displaySetInstanceUID = jumpToDisplaySet;\r\n      const element = document.getElementById(\r\n        `thumbnail-${displaySetInstanceUID}`\r\n      );\r\n\r\n      if (element && typeof element.scrollIntoView === 'function') {\r\n        // TODO: Any way to support IE here?\r\n        element.scrollIntoView({ behavior: 'smooth' });\r\n\r\n        setJumpToDisplaySet(null);\r\n      }\r\n    }\r\n  }, [jumpToDisplaySet, expandedStudyInstanceUIDs, activeTabName]);\r\n\r\n  useEffect(() => {\r\n    if (!jumpToDisplaySet) {\r\n      return;\r\n    }\r\n\r\n    const displaySetInstanceUID = jumpToDisplaySet;\r\n    // Set the activeTabName and expand the study\r\n    const thumbnailLocation = _findTabAndStudyOfDisplaySet(\r\n      displaySetInstanceUID,\r\n      tabs\r\n    );\r\n    if (!thumbnailLocation) {\r\n      console.warn('jumpToThumbnail: displaySet thumbnail not found.');\r\n\r\n      return;\r\n    }\r\n    const { tabName, StudyInstanceUID } = thumbnailLocation;\r\n    setActiveTabName(tabName);\r\n    const studyExpanded = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\r\n    if (!studyExpanded) {\r\n      const updatedExpandedStudyInstanceUIDs = [\r\n        ...expandedStudyInstanceUIDs,\r\n        StudyInstanceUID,\r\n      ];\r\n      setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\r\n    }\r\n  }, [expandedStudyInstanceUIDs, jumpToDisplaySet, tabs]);\r\n\r\n  return (\r\n    <StudyBrowser\r\n      tabs={tabs}\r\n      servicesManager={servicesManager}\r\n      activeTabName={activeTabName}\r\n      expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\r\n      onClickStudy={_handleStudyClick}\r\n      onClickTab={clickedTabName => {\r\n        setActiveTabName(clickedTabName);\r\n      }}\r\n      onClickUntrack={displaySetInstanceUID => {\r\n        const displaySet = displaySetService.getDisplaySetByUID(\r\n          displaySetInstanceUID\r\n        );\r\n        // TODO: shift this somewhere else where we're centralizing this logic?\r\n        // Potentially a helper from displaySetInstanceUID to this\r\n        sendTrackedMeasurementsEvent('UNTRACK_SERIES', {\r\n          SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n        });\r\n      }}\r\n      onClickThumbnail={() => {}}\r\n      onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\r\n      activeDisplaySetInstanceUIDs={activeViewportDisplaySetInstanceUIDs}\r\n    />\r\n  );\r\n}\r\n\r\nPanelStudyBrowserTracking.propTypes = {\r\n  servicesManager: PropTypes.object.isRequired,\r\n  dataSource: PropTypes.shape({\r\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  getImageSrc: PropTypes.func.isRequired,\r\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\r\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PanelStudyBrowserTracking;\r\n\r\n/**\r\n * Maps from the DataSource's format to a naturalized object\r\n *\r\n * @param {*} studies\r\n */\r\nfunction _mapDataSourceStudies(studies) {\r\n  return studies.map(study => {\r\n    // TODO: Why does the data source return in this format?\r\n    return {\r\n      AccessionNumber: study.accession,\r\n      StudyDate: study.date,\r\n      StudyDescription: study.description,\r\n      NumInstances: study.instances,\r\n      ModalitiesInStudy: study.modalities,\r\n      PatientID: study.mrn,\r\n      PatientName: study.patientName,\r\n      StudyInstanceUID: study.studyInstanceUid,\r\n      StudyTime: study.time,\r\n    };\r\n  });\r\n}\r\n\r\nfunction _mapDisplaySets(\r\n  displaySets,\r\n  thumbnailImageSrcMap,\r\n  trackedSeriesInstanceUIDs,\r\n  viewports, // TODO: make array of `displaySetInstanceUIDs`?\r\n  viewportGridService,\r\n  dataSource,\r\n  displaySetService,\r\n  uiDialogService,\r\n  uiNotificationService\r\n) {\r\n  const thumbnailDisplaySets = [];\r\n  const thumbnailNoImageDisplaySets = [];\r\n  displaySets\r\n    .filter(ds => !ds.excludeFromThumbnailBrowser)\r\n    .forEach(ds => {\r\n      const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\r\n      const componentType = _getComponentType(ds.Modality);\r\n      const numPanes = viewportGridService.getNumViewportPanes();\r\n      const viewportIdentificator =\r\n        numPanes === 1\r\n          ? []\r\n          : viewports.reduce((acc, viewportData, index) => {\r\n              if (\r\n                index < numPanes &&\r\n                viewportData?.displaySetInstanceUIDs?.includes(\r\n                  ds.displaySetInstanceUID\r\n                )\r\n              ) {\r\n                acc.push(viewportData.viewportLabel);\r\n              }\r\n              return acc;\r\n            }, []);\r\n\r\n      const array =\r\n        componentType === 'thumbnailTracked'\r\n          ? thumbnailDisplaySets\r\n          : thumbnailNoImageDisplaySets;\r\n\r\n      const { displaySetInstanceUID } = ds;\r\n\r\n      const thumbnailProps = {\r\n        displaySetInstanceUID,\r\n        description: ds.SeriesDescription,\r\n        seriesNumber: ds.SeriesNumber,\r\n        modality: ds.Modality,\r\n        seriesDate: formatDate(ds.SeriesDate),\r\n        numInstances: ds.numImageFrames,\r\n        countIcon: ds.countIcon,\r\n        StudyInstanceUID: ds.StudyInstanceUID,\r\n        componentType,\r\n        imageSrc,\r\n        dragData: {\r\n          type: 'displayset',\r\n          displaySetInstanceUID,\r\n          // .. Any other data to pass\r\n        },\r\n        isTracked: trackedSeriesInstanceUIDs.includes(ds.SeriesInstanceUID),\r\n        viewportIdentificator,\r\n      };\r\n\r\n      if (componentType === 'thumbnailNoImage') {\r\n        if (dataSource.reject && dataSource.reject.series) {\r\n          thumbnailProps.canReject = true;\r\n          thumbnailProps.onReject = () => {\r\n            uiDialogService.create({\r\n              id: 'ds-reject-sr',\r\n              centralize: true,\r\n              isDraggable: false,\r\n              showOverlay: true,\r\n              content: Dialog,\r\n              contentProps: {\r\n                title: 'Delete Report',\r\n                body: () => (\r\n                  <div className=\"p-4 text-white bg-primary-dark\">\r\n                    <p>Are you sure you want to delete this report?</p>\r\n                    <p>This action cannot be undone.</p>\r\n                  </div>\r\n                ),\r\n                actions: [\r\n                  {\r\n                    id: 'cancel',\r\n                    text: 'Cancel',\r\n                    type: ButtonEnums.type.secondary,\r\n                  },\r\n                  {\r\n                    id: 'yes',\r\n                    text: 'Yes',\r\n                    type: ButtonEnums.type.primary,\r\n                    classes: ['reject-yes-button'],\r\n                  },\r\n                ],\r\n                onClose: () => uiDialogService.dismiss({ id: 'ds-reject-sr' }),\r\n                onShow: () => {\r\n                  const yesButton = document.querySelector(\r\n                    '.reject-yes-button'\r\n                  );\r\n\r\n                  yesButton.focus();\r\n                },\r\n                onSubmit: async ({ action }) => {\r\n                  switch (action.id) {\r\n                    case 'yes':\r\n                      try {\r\n                        await dataSource.reject.series(\r\n                          ds.StudyInstanceUID,\r\n                          ds.SeriesInstanceUID\r\n                        );\r\n                        displaySetService.deleteDisplaySet(\r\n                          displaySetInstanceUID\r\n                        );\r\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                        uiNotificationService.show({\r\n                          title: 'Delete Report',\r\n                          message: 'Report deleted successfully',\r\n                          type: 'success',\r\n                        });\r\n                      } catch (error) {\r\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                        uiNotificationService.show({\r\n                          title: 'Delete Report',\r\n                          message: 'Failed to delete report',\r\n                          type: 'error',\r\n                        });\r\n                      }\r\n                      break;\r\n                    case 'cancel':\r\n                      uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                      break;\r\n                  }\r\n                },\r\n              },\r\n            });\r\n          };\r\n        } else {\r\n          thumbnailProps.canReject = false;\r\n        }\r\n      }\r\n\r\n      array.push(thumbnailProps);\r\n    });\r\n\r\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\r\n}\r\n\r\nconst thumbnailNoImageModalities = [\r\n  'SR',\r\n  'SEG',\r\n  'SM',\r\n  'RTSTRUCT',\r\n  'RTPLAN',\r\n  'RTDOSE',\r\n  'DOC',\r\n  'OT',\r\n];\r\n\r\nfunction _getComponentType(Modality) {\r\n  if (thumbnailNoImageModalities.includes(Modality)) {\r\n    return 'thumbnailNoImage';\r\n  }\r\n\r\n  return 'thumbnailTracked';\r\n}\r\n\r\n/**\r\n *\r\n * @param {string[]} primaryStudyInstanceUIDs\r\n * @param {object[]} studyDisplayList\r\n * @param {string} studyDisplayList.studyInstanceUid\r\n * @param {string} studyDisplayList.date\r\n * @param {string} studyDisplayList.description\r\n * @param {string} studyDisplayList.modalities\r\n * @param {number} studyDisplayList.numInstances\r\n * @param {object[]} displaySets\r\n * @returns tabs - The prop object expected by the StudyBrowser component\r\n */\r\nfunction _createStudyBrowserTabs(\r\n  primaryStudyInstanceUIDs,\r\n  studyDisplayList,\r\n  displaySets,\r\n  hangingProtocolService\r\n) {\r\n  const primaryStudies = [];\r\n  const recentStudies = [];\r\n  const allStudies = [];\r\n\r\n  // Iterate over each study...\r\n  studyDisplayList.forEach(study => {\r\n    // Find it's display sets\r\n    const displaySetsForStudy = displaySets.filter(\r\n      ds => ds.StudyInstanceUID === study.studyInstanceUid\r\n    );\r\n\r\n    // Sort them\r\n    const dsSortFn = hangingProtocolService.getDisplaySetSortFunction();\r\n    displaySetsForStudy.sort(dsSortFn);\r\n\r\n    /* Sort by series number, then by series date\r\n      displaySetsForStudy.sort((a, b) => {\r\n        if (a.seriesNumber !== b.seriesNumber) {\r\n          return a.seriesNumber - b.seriesNumber;\r\n        }\r\n\r\n        const seriesDateA = Date.parse(a.seriesDate);\r\n        const seriesDateB = Date.parse(b.seriesDate);\r\n\r\n        return seriesDateA - seriesDateB;\r\n      });\r\n    */\r\n\r\n    // Map the study to it's tab/view representation\r\n    const tabStudy = Object.assign({}, study, {\r\n      displaySets: displaySetsForStudy,\r\n    });\r\n\r\n    // Add the \"tab study\" to the 'primary', 'recent', and/or 'all' tab group(s)\r\n    if (primaryStudyInstanceUIDs.includes(study.studyInstanceUid)) {\r\n      primaryStudies.push(tabStudy);\r\n      allStudies.push(tabStudy);\r\n    } else {\r\n      // TODO: Filter allStudies to dates within one year of current date\r\n      recentStudies.push(tabStudy);\r\n      allStudies.push(tabStudy);\r\n    }\r\n  });\r\n\r\n  // Newest first\r\n  const _byDate = (a, b) => {\r\n    const dateA = Date.parse(a);\r\n    const dateB = Date.parse(b);\r\n\r\n    return dateB - dateA;\r\n  };\r\n\r\n  const tabs = [\r\n    {\r\n      name: 'primary',\r\n      label: 'Primary',\r\n      studies: primaryStudies.sort((studyA, studyB) =>\r\n        _byDate(studyA.date, studyB.date)\r\n      ),\r\n    },\r\n    {\r\n      name: 'recent',\r\n      label: 'Recent',\r\n      studies: recentStudies.sort((studyA, studyB) =>\r\n        _byDate(studyA.date, studyB.date)\r\n      ),\r\n    },\r\n    {\r\n      name: 'all',\r\n      label: 'All',\r\n      studies: allStudies.sort((studyA, studyB) =>\r\n        _byDate(studyA.date, studyB.date)\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return tabs;\r\n}\r\n\r\nfunction _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs) {\r\n  for (let t = 0; t < tabs.length; t++) {\r\n    const { studies } = tabs[t];\r\n\r\n    for (let s = 0; s < studies.length; s++) {\r\n      const { displaySets } = studies[s];\r\n\r\n      for (let d = 0; d < displaySets.length; d++) {\r\n        const displaySet = displaySets[d];\r\n\r\n        if (displaySet.displaySetInstanceUID === displaySetInstanceUID) {\r\n          return {\r\n            tabName: tabs[t].name,\r\n            StudyInstanceUID: studies[s].studyInstanceUid,\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @param {*} cornerstone\r\n * @param {*} imageId\r\n */\r\nfunction getImageSrcFromImageId(cornerstone, imageId) {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement('canvas');\r\n    cornerstone.utilities\r\n      .loadImageToCanvas({ canvas, imageId })\r\n      .then(imageId => {\r\n        resolve(canvas.toDataURL());\r\n      })\r\n      .catch(reject);\r\n  });\r\n}\r\n\r\nexport default getImageSrcFromImageId;\r\n","function requestDisplaySetCreationForStudy(\r\n  dataSource,\r\n  displaySetService,\r\n  StudyInstanceUID,\r\n  madeInClient\r\n) {\r\n  if (\r\n    displaySetService.activeDisplaySets.some(\r\n      displaySet => displaySet.StudyInstanceUID === StudyInstanceUID\r\n    )\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  dataSource.retrieve.series.metadata({ StudyInstanceUID, madeInClient });\r\n}\r\n\r\nexport default requestDisplaySetCreationForStudy;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//\r\nimport PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\r\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\r\nimport requestDisplaySetCreationForStudy from './requestDisplaySetCreationForStudy';\r\n\r\nfunction _getStudyForPatientUtility(extensionManager) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-default.utilityModule.common'\r\n  );\r\n\r\n  const { getStudiesForPatientByMRN } = utilityModule.exports;\r\n  return getStudiesForPatientByMRN;\r\n}\r\n\r\n/**\r\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\r\n *\r\n * @param {object} params\r\n * @param {object} commandsManager\r\n * @param {object} extensionManager\r\n */\r\nfunction WrappedPanelStudyBrowserTracking({\r\n  commandsManager,\r\n  extensionManager,\r\n  servicesManager,\r\n}) {\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n\r\n  const getStudiesForPatientByMRN = _getStudyForPatientUtility(\r\n    extensionManager\r\n  );\r\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(\r\n    null,\r\n    dataSource\r\n  );\r\n  const _getImageSrcFromImageId = _createGetImageSrcFromImageIdFn(\r\n    extensionManager\r\n  );\r\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\r\n    null,\r\n    dataSource\r\n  );\r\n\r\n  return (\r\n    <PanelStudyBrowserTracking\r\n      servicesManager={servicesManager}\r\n      dataSource={dataSource}\r\n      getImageSrc={_getImageSrcFromImageId}\r\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\r\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Grabs cornerstone library reference using a dependent command from\r\n * the @ohif/extension-cornerstone extension. Then creates a helper function\r\n * that can take an imageId and return an image src.\r\n *\r\n * @param {func} getCommand - CommandManager's getCommand method\r\n * @returns {func} getImageSrcFromImageId - A utility function powered by\r\n * cornerstone\r\n */\r\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\r\n  const utilities = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  try {\r\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\r\n    return getImageSrcFromImageId.bind(null, cornerstone);\r\n  } catch (ex) {\r\n    throw new Error('Required command not found');\r\n  }\r\n}\r\n\r\nWrappedPanelStudyBrowserTracking.propTypes = {\r\n  commandsManager: PropTypes.object.isRequired,\r\n  extensionManager: PropTypes.object.isRequired,\r\n  servicesManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default WrappedPanelStudyBrowserTracking;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { Button, ButtonEnums } from '@ohif/ui';\r\n\r\nfunction ActionButtons({ onExportClick, onCreateReportClick, disabled }) {\r\n  const { t } = useTranslation('MeasurementTable');\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        onClick={onExportClick}\r\n        disabled={disabled}\r\n        type={ButtonEnums.type.secondary}\r\n        size={ButtonEnums.size.small}\r\n      >\r\n        {t('Export')}\r\n      </Button>\r\n      <Button\r\n        className=\"ml-2\"\r\n        onClick={onCreateReportClick}\r\n        type={ButtonEnums.type.secondary}\r\n        size={ButtonEnums.size.small}\r\n        disabled={disabled}\r\n      >\r\n        {t('Create Report')}\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nActionButtons.propTypes = {\r\n  onExportClick: PropTypes.func,\r\n  onCreateReportClick: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nActionButtons.defaultProps = {\r\n  onExportClick: () => alert('Export'),\r\n  onCreateReportClick: () => alert('Create Report'),\r\n  disabled: false,\r\n};\r\n\r\nexport default ActionButtons;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  StudySummary,\r\n  MeasurementTable,\r\n  Dialog,\r\n  Input,\r\n  useViewportGrid,\r\n  ButtonEnums,\r\n} from '@ohif/ui';\r\nimport { DicomMetadataStore, utils } from '@ohif/core';\r\nimport { useDebounce } from '@hooks';\r\nimport ActionButtons from './ActionButtons';\r\nimport { useTrackedMeasurements } from '../../getContextModule';\r\nimport debounce from 'lodash.debounce';\r\n\r\nconst { downloadCSVReport } = utils;\r\nconst { formatDate } = utils;\r\n\r\nconst DISPLAY_STUDY_SUMMARY_INITIAL_VALUE = {\r\n  key: undefined, //\r\n  date: '', // '07-Sep-2010',\r\n  modality: '', // 'CT',\r\n  description: '', // 'CHEST/ABD/PELVIS W CONTRAST',\r\n};\r\n\r\nfunction PanelMeasurementTableTracking({ servicesManager, extensionManager }) {\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const [measurementChangeTimestamp, setMeasurementsUpdated] = useState(\r\n    Date.now().toString()\r\n  );\r\n  const debouncedMeasurementChangeTimestamp = useDebounce(\r\n    measurementChangeTimestamp,\r\n    200\r\n  );\r\n  const {\r\n    measurementService,\r\n    uiDialogService,\r\n    displaySetService,\r\n  } = servicesManager.services;\r\n  const [\r\n    trackedMeasurements,\r\n    sendTrackedMeasurementsEvent,\r\n  ] = useTrackedMeasurements();\r\n  const { trackedStudy, trackedSeries } = trackedMeasurements.context;\r\n  const [displayStudySummary, setDisplayStudySummary] = useState(\r\n    DISPLAY_STUDY_SUMMARY_INITIAL_VALUE\r\n  );\r\n  const [displayMeasurements, setDisplayMeasurements] = useState([]);\r\n  const measurementsPanelRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const measurements = measurementService.getMeasurements();\r\n    const filteredMeasurements = measurements.filter(\r\n      m =>\r\n        trackedStudy === m.referenceStudyUID &&\r\n        trackedSeries.includes(m.referenceSeriesUID)\r\n    );\r\n\r\n    const mappedMeasurements = filteredMeasurements.map(m =>\r\n      _mapMeasurementToDisplay(\r\n        m,\r\n        measurementService.VALUE_TYPES,\r\n        displaySetService\r\n      )\r\n    );\r\n    setDisplayMeasurements(mappedMeasurements);\r\n    // eslint-ignore-next-line\r\n  }, [\r\n    measurementService,\r\n    trackedStudy,\r\n    trackedSeries,\r\n    debouncedMeasurementChangeTimestamp,\r\n  ]);\r\n\r\n  const updateDisplayStudySummary = async () => {\r\n    if (trackedMeasurements.matches('tracking')) {\r\n      const StudyInstanceUID = trackedStudy;\r\n      const studyMeta = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n      const instanceMeta = studyMeta.series[0].instances[0];\r\n      const { StudyDate, StudyDescription } = instanceMeta;\r\n\r\n      const modalities = new Set();\r\n      studyMeta.series.forEach(series => {\r\n        if (trackedSeries.includes(series.SeriesInstanceUID)) {\r\n          modalities.add(series.instances[0].Modality);\r\n        }\r\n      });\r\n      const modality = Array.from(modalities).join('/');\r\n\r\n      if (displayStudySummary.key !== StudyInstanceUID) {\r\n        setDisplayStudySummary({\r\n          key: StudyInstanceUID,\r\n          date: StudyDate, // TODO: Format: '07-Sep-2010'\r\n          modality,\r\n          description: StudyDescription,\r\n        });\r\n      }\r\n    } else if (trackedStudy === '' || trackedStudy === undefined) {\r\n      setDisplayStudySummary(DISPLAY_STUDY_SUMMARY_INITIAL_VALUE);\r\n    }\r\n  };\r\n\r\n  // ~~ DisplayStudySummary\r\n  useEffect(() => {\r\n    updateDisplayStudySummary();\r\n  }, [\r\n    displayStudySummary.key,\r\n    trackedMeasurements,\r\n    trackedStudy,\r\n    updateDisplayStudySummary,\r\n  ]);\r\n\r\n  // TODO: Better way to consolidated, debounce, check on change?\r\n  // Are we exposing the right API for measurementService?\r\n  // This watches for ALL measurementService changes. It updates a timestamp,\r\n  // which is debounced. After a brief period of inactivity, this triggers\r\n  // a re-render where we grab up-to-date measurements\r\n  useEffect(() => {\r\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\r\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\r\n    const updated = measurementService.EVENTS.MEASUREMENT_UPDATED;\r\n    const removed = measurementService.EVENTS.MEASUREMENT_REMOVED;\r\n    const cleared = measurementService.EVENTS.MEASUREMENTS_CLEARED;\r\n    const subscriptions = [];\r\n\r\n    [added, addedRaw, updated, removed, cleared].forEach(evt => {\r\n      subscriptions.push(\r\n        measurementService.subscribe(evt, () => {\r\n          setMeasurementsUpdated(Date.now().toString());\r\n          if (evt === added) {\r\n            debounce(() => {\r\n              measurementsPanelRef.current.scrollTop =\r\n                measurementsPanelRef.current.scrollHeight;\r\n            }, 300)();\r\n          }\r\n        }).unsubscribe\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, [measurementService, sendTrackedMeasurementsEvent]);\r\n\r\n  async function exportReport() {\r\n    const measurements = measurementService.getMeasurements();\r\n    const trackedMeasurements = measurements.filter(\r\n      m =>\r\n        trackedStudy === m.referenceStudyUID &&\r\n        trackedSeries.includes(m.referenceSeriesUID)\r\n    );\r\n\r\n    downloadCSVReport(trackedMeasurements, measurementService);\r\n  }\r\n\r\n  const jumpToImage = ({ uid, isActive }) => {\r\n    measurementService.jumpToMeasurement(viewportGrid.activeViewportIndex, uid);\r\n\r\n    onMeasurementItemClickHandler({ uid, isActive });\r\n  };\r\n\r\n  const onMeasurementItemEditHandler = ({ uid, isActive }) => {\r\n    const measurement = measurementService.getMeasurement(uid);\r\n    jumpToImage({ uid, isActive });\r\n\r\n    const onSubmitHandler = ({ action, value }) => {\r\n      switch (action.id) {\r\n        case 'save': {\r\n          measurementService.update(\r\n            uid,\r\n            {\r\n              ...measurement,\r\n              ...value,\r\n            },\r\n            true\r\n          );\r\n        }\r\n      }\r\n      uiDialogService.dismiss({ id: 'enter-annotation' });\r\n    };\r\n\r\n    uiDialogService.create({\r\n      id: 'enter-annotation',\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: 'Annotation',\r\n        noCloseButton: true,\r\n        value: { label: measurement.label || '' },\r\n        body: ({ value, setValue }) => {\r\n          const onChangeHandler = event => {\r\n            event.persist();\r\n            setValue(value => ({ ...value, label: event.target.value }));\r\n          };\r\n\r\n          const onKeyPressHandler = event => {\r\n            if (event.key === 'Enter') {\r\n              onSubmitHandler({ value, action: { id: 'save' } });\r\n            }\r\n          };\r\n          return (\r\n            <Input\r\n              label=\"Enter your annotation\"\r\n              labelClassName=\"text-white grow text-[14px] leading-[1.2]\"\r\n              autoFocus\r\n              id=\"annotation\"\r\n              className=\"bg-black border-primary-main\"\r\n              type=\"text\"\r\n              value={value.label}\r\n              onChange={onChangeHandler}\r\n              onKeyPress={onKeyPressHandler}\r\n            />\r\n          );\r\n        },\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\r\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\r\n        ],\r\n        onSubmit: onSubmitHandler,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onMeasurementItemClickHandler = ({ uid, isActive }) => {\r\n    if (!isActive) {\r\n      const measurements = [...displayMeasurements];\r\n      const measurement = measurements.find(m => m.uid === uid);\r\n\r\n      measurements.forEach(m => (m.isActive = m.uid !== uid ? false : true));\r\n      measurement.isActive = true;\r\n      setDisplayMeasurements(measurements);\r\n    }\r\n  };\r\n\r\n  const displayMeasurementsWithoutFindings = displayMeasurements.filter(\r\n    dm => dm.measurementType !== measurementService.VALUE_TYPES.POINT\r\n  );\r\n  const additionalFindings = displayMeasurements.filter(\r\n    dm => dm.measurementType === measurementService.VALUE_TYPES.POINT\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"overflow-x-hidden overflow-y-auto invisible-scrollbar\"\r\n        ref={measurementsPanelRef}\r\n        data-cy={'trackedMeasurements-panel'}\r\n      >\r\n        {displayStudySummary.key && (\r\n          <StudySummary\r\n            date={formatDate(displayStudySummary.date)}\r\n            modality={displayStudySummary.modality}\r\n            description={displayStudySummary.description}\r\n          />\r\n        )}\r\n        <MeasurementTable\r\n          title=\"Measurements\"\r\n          data={displayMeasurementsWithoutFindings}\r\n          servicesManager={servicesManager}\r\n          onClick={jumpToImage}\r\n          onEdit={onMeasurementItemEditHandler}\r\n        />\r\n        {additionalFindings.length !== 0 && (\r\n          <MeasurementTable\r\n            title=\"Additional Findings\"\r\n            data={additionalFindings}\r\n            servicesManager={servicesManager}\r\n            onClick={jumpToImage}\r\n            onEdit={onMeasurementItemEditHandler}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"flex justify-center p-4\">\r\n        <ActionButtons\r\n          onExportClick={exportReport}\r\n          onCreateReportClick={() => {\r\n            sendTrackedMeasurementsEvent('SAVE_REPORT', {\r\n              viewportIndex: viewportGrid.activeViewportIndex,\r\n              isBackupSave: true,\r\n            });\r\n          }}\r\n          disabled={\r\n            additionalFindings.length === 0 &&\r\n            displayMeasurementsWithoutFindings.length === 0\r\n          }\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nPanelMeasurementTableTracking.propTypes = {\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      measurementService: PropTypes.shape({\r\n        getMeasurements: PropTypes.func.isRequired,\r\n        VALUE_TYPES: PropTypes.object.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\n// TODO: This could be a measurementService mapper\r\nfunction _mapMeasurementToDisplay(measurement, types, displaySetService) {\r\n  const { referenceStudyUID, referenceSeriesUID, SOPInstanceUID } = measurement;\r\n\r\n  // TODO: We don't deal with multiframe well yet, would need to update\r\n  // This in OHIF-312 when we add FrameIndex to measurements.\r\n\r\n  const instance = DicomMetadataStore.getInstance(\r\n    referenceStudyUID,\r\n    referenceSeriesUID,\r\n    SOPInstanceUID\r\n  );\r\n\r\n  const displaySets = displaySetService.getDisplaySetsForSeries(\r\n    referenceSeriesUID\r\n  );\r\n\r\n  if (!displaySets[0] || !displaySets[0].images) {\r\n    throw new Error(\r\n      'The tracked measurements panel should only be tracking \"stack\" displaySets.'\r\n    );\r\n  }\r\n\r\n  const {\r\n    displayText: baseDisplayText,\r\n    uid,\r\n    label: baseLabel,\r\n    type,\r\n    selected,\r\n    findingSites,\r\n    finding,\r\n  } = measurement;\r\n\r\n  const firstSite = findingSites?.[0];\r\n  const label = baseLabel || finding?.text || firstSite?.text || '(empty)';\r\n  let displayText = baseDisplayText || [];\r\n  if (findingSites) {\r\n    const siteText = [];\r\n    findingSites.forEach(site => {\r\n      if (site?.text !== label) siteText.push(site.text);\r\n    });\r\n    displayText = [...siteText, ...displayText];\r\n  }\r\n  if (finding && finding?.text !== label) {\r\n    displayText = [finding.text, ...displayText];\r\n  }\r\n\r\n  return {\r\n    uid,\r\n    label,\r\n    baseLabel,\r\n    measurementType: type,\r\n    displayText,\r\n    baseDisplayText,\r\n    isActive: selected,\r\n    finding,\r\n    findingSites,\r\n  };\r\n}\r\n\r\nexport default PanelMeasurementTableTracking;\r\n","import { Types } from '@ohif/core';\r\nimport {\r\n  PanelMeasurementTableTracking,\r\n  PanelStudyBrowserTracking,\r\n} from './panels';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\nfunction getPanelModule({\r\n  commandsManager,\r\n  extensionManager,\r\n  servicesManager,\r\n}): Types.Panel[] {\r\n  return [\r\n    {\r\n      name: 'seriesList',\r\n      iconName: 'group-layers',\r\n      iconLabel: 'Studies',\r\n      label: 'Studies',\r\n      component: PanelStudyBrowserTracking.bind(null, {\r\n        commandsManager,\r\n        extensionManager,\r\n        servicesManager,\r\n      }),\r\n    },\r\n\r\n    {\r\n      name: 'trackedMeasurements',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'Measure',\r\n      label: 'Measurements',\r\n      component: PanelMeasurementTableTracking.bind(null, {\r\n        commandsManager,\r\n        extensionManager,\r\n        servicesManager,\r\n      }),\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","import React from 'react';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(\r\n    /* webpackPrefetch: true */ './viewports/TrackedCornerstoneViewport'\r\n  );\r\n});\r\n\r\nconst OHIFCornerstoneViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nfunction getViewportModule({\r\n  servicesManager,\r\n  commandsManager,\r\n  extensionManager,\r\n}) {\r\n  const ExtendedOHIFCornerstoneTrackingViewport = props => {\r\n    return (\r\n      <OHIFCornerstoneViewport\r\n        servicesManager={servicesManager}\r\n        commandsManager={commandsManager}\r\n        extensionManager={extensionManager}\r\n        {...props}\r\n      />\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'cornerstone-tracked',\r\n      component: ExtendedOHIFCornerstoneTrackingViewport,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getViewportModule;\r\n","import getContextModule from './getContextModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getViewportModule from './getViewportModule';\r\nimport { id } from './id.js';\r\n\r\nconst measurementTrackingExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n\r\n  getContextModule,\r\n  getPanelModule,\r\n  getViewportModule,\r\n};\r\n\r\nexport default measurementTrackingExtension;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n"],"names":["RESPONSE","machineConfiguration","id","initial","context","trackedStudy","trackedSeries","ignoredSeries","prevTrackedStudy","prevTrackedSeries","prevIgnoredSeries","ignoredSRSeriesForHydration","isDirty","states","off","type","idle","entry","on","TRACK_SERIES","SET_TRACKED_SERIES","target","actions","PROMPT_HYDRATE_SR","cond","RESTORE_PROMPT_HYDRATE_SR","HYDRATE_SR","promptBeginTracking","invoke","src","onDone","onError","tracking","UNTRACK_SERIES","SAVE_REPORT","SET_DIRTY","promptTrackNewSeries","promptTrackNewStudy","promptSaveReport","promptHydrateStructuredReport","hydrateStructuredReport","strict","defaultOptions","services","ctx","evt","discardPreviouslyTrackedMeasurements","console","log","clearAllMeasurements","jumpToFirstMeasurementInActiveViewport","warn","showStructuredReportDisplaySetInActiveViewport","clearContext","assign","setTrackedStudyAndSeries","slice","data","StudyInstanceUID","SeriesInstanceUID","setTrackedStudyAndMultipleSeries","studyInstanceUID","seriesInstanceUIDs","SeriesInstanceUIDs","setIsDirtyToClean","setIsDirty","ignoreSeries","ignoreHydrationForSRSeries","srSeriesInstanceUID","addTrackedSeries","removeTrackedSeries","filter","ser","guards","shouldSetDirty","undefined","includes","shouldKillMachine","userResponse","shouldAddSeries","shouldSetStudyAndSeries","shouldAddIgnoredSeries","shouldPromptSaveReport","shouldIgnoreHydrationForSR","shouldSaveAndContinueWithSameReport","isBackupSave","shouldSaveAndStartNewReport","shouldHydrateStructuredReport","hasRemainingTrackedSeries","length","hasNotIgnoredSRSeriesForHydration","isNewStudy","isNewSeries","NO_NEVER","CANCEL","CREATE_REPORT","ADD_SERIES","SET_STUDY_AND_SERIES","_ref","servicesManager","extensionManager","uiViewportDialogService","viewportIndex","Promise","async","resolve","reject","promptResult","message","ButtonEnums","secondary","text","value","primary","onSubmit","result","hide","show","onOutsideClick","_askTrackMeasurements","NO_NOT_FOR_SERIES","UIViewportDialogService","_askShouldAddMeasurements","_askSaveDiscardOrCancel","Loading","React","className","commandsManager","dataSource","measurements","options","displaySetService","uiNotificationService","uiDialogService","loadingDialogId","create","showOverlay","isDraggable","centralize","content","naturalizedReport","runCommand","measurementData","additionalFindingTypes","DicomMetadataStore","addInstances","displaySetInstanceUID","getMostRecentDisplaySet","title","error","dismiss","MIN_SR_SERIES_NUMBER","measurementService","displaySetInstanceUIDs","dialogId","_handleFormSubmit","action","label","trim","Dialog","useLastPosition","contentProps","noCloseButton","onClose","_handleClose","body","_ref2","setValue","Input","labelClassName","autoFocus","onChange","event","persist","onKeyPress","key","createReportDialogPrompt","getDataSources","trackedMeasurements","getMeasurements","m","referenceStudyUID","referenceSeriesUID","SeriesDescription","SeriesNumber","srSeriesNumbers","getActiveDisplaySets","ds","Modality","map","Math","max","getNextSRSeriesNumber","createReportAsync","createdDisplaySetInstanceUIDs","HYDRATE_REPORT","srDisplaySet","getDisplaySetByUID","hydrationResult","baseHydrateStructuredReport","TrackedMeasurementsContext","displayName","useTrackedMeasurements","useContext","SR_SOPCLASSHANDLERID","TrackedMeasurementsContextProvider","children","viewportGrid","viewportGridService","useViewportGrid","activeViewportIndex","viewports","machineOptions","Object","referencedDisplaySetUID","referencedImages","images","isVolumeIdReferenced","imageId","startsWith","imageIndex","findIndex","image","imageIdToUse","keys","substring","setDisplaySetsForViewport","viewportOptions","initialImageOptions","index","StructuredReportDisplaySetInstanceUID","measurementIds","ms","fm","i","remove","uid","bind","measurementTrackingMachine","Machine","sendTrackedMeasurementsEvent","trackedMeasurementsService","useMachine","useEffect","activeViewport","displaySet","SOPClassHandlerId","isLoaded","load","isRehydratable","Provider","propTypes","PropTypes","isRequired","BoundTrackedMeasurementsContextProvider","name","provider","formatDate","utils","PanelStudyBrowserTracking","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","hangingProtocolService","StudyInstanceUIDs","useImageViewer","numCols","numRows","activeTabName","setActiveTabName","useState","expandedStudyInstanceUIDs","setExpandedStudyInstanceUIDs","studyDisplayList","setStudyDisplayList","displaySets","setDisplaySets","thumbnailImageSrcMap","setThumbnailImageSrcMap","jumpToDisplaySet","setJumpToDisplaySet","activeViewportDisplaySetInstanceUIDs","added","EVENTS","MEASUREMENT_ADDED","addedRaw","RAW_MEASUREMENT_ADDED","subscriptions","forEach","push","subscribe","source","measurement","unsubscribe","unsub","sid","qidoForStudyUID","query","studies","search","studyInstanceUid","qidoStudiesForPatient","actuallyMappedStudies","study","AccessionNumber","accession","StudyDate","date","StudyDescription","description","NumInstances","instances","ModalitiesInStudy","modalities","PatientID","mrn","PatientName","patientName","StudyTime","time","qidoStudy","numInstances","prevArray","ret","find","it","fetchStudiesForPatient","currentDisplaySets","activeDisplaySets","newImageSrcEntry","dSet","imageIds","getImageIdsForDisplaySet","floor","prevState","mappedDisplaySets","_mapDisplaySets","SubscriptionDisplaySetsAdded","DISPLAY_SETS_ADDED","displaySetsAdded","madeInClient","SubscriptionDisplaySetsChanged","DISPLAY_SETS_CHANGED","changedDisplaySets","tabs","primaryStudyInstanceUIDs","primaryStudies","recentStudies","allStudies","displaySetsForStudy","dsSortFn","getDisplaySetSortFunction","sort","tabStudy","_byDate","a","b","dateA","Date","parse","studyA","studyB","_createStudyBrowserTabs","element","document","getElementById","scrollIntoView","behavior","thumbnailLocation","t","s","d","tabName","_findTabAndStudyOfDisplaySet","updatedExpandedStudyInstanceUIDs","StudyBrowser","onClickStudy","shouldCollapseStudy","stdyUid","onClickTab","clickedTabName","onClickUntrack","onClickThumbnail","onDoubleClickThumbnail","updatedViewports","getViewportsRequireUpdate","duration","setDisplaySetsForViewports","activeDisplaySetInstanceUIDs","trackedSeriesInstanceUIDs","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","imageSrc","componentType","thumbnailNoImageModalities","_getComponentType","numPanes","getNumViewportPanes","viewportIdentificator","reduce","acc","viewportData","viewportLabel","array","thumbnailProps","seriesNumber","modality","seriesDate","SeriesDate","numImageFrames","countIcon","dragData","isTracked","series","canReject","onReject","classes","onShow","querySelector","focus","_ref3","deleteDisplaySet","cornerstone","canvas","createElement","utilities","loadImageToCanvas","then","toDataURL","catch","some","retrieve","metadata","WrappedPanelStudyBrowserTracking","getActiveDataSource","utilityModule","getModuleEntry","exports","_getStudyForPatientUtility","_getStudiesForPatientByMRN","_getImageSrcFromImageId","getCornerstoneLibraries","getImageSrcFromImageId","ex","Error","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","ActionButtons","onExportClick","onCreateReportClick","disabled","useTranslation","Button","onClick","size","small","defaultProps","alert","downloadCSVReport","DISPLAY_STUDY_SUMMARY_INITIAL_VALUE","PanelMeasurementTableTracking","measurementChangeTimestamp","setMeasurementsUpdated","now","toString","debouncedMeasurementChangeTimestamp","useDebounce","displayStudySummary","setDisplayStudySummary","displayMeasurements","setDisplayMeasurements","measurementsPanelRef","useRef","mappedMeasurements","types","SOPInstanceUID","getInstance","getDisplaySetsForSeries","displayText","baseDisplayText","baseLabel","selected","findingSites","finding","firstSite","siteText","site","measurementType","isActive","_mapMeasurementToDisplay","VALUE_TYPES","updateDisplayStudySummary","matches","studyMeta","getStudy","instanceMeta","Set","add","Array","from","join","updated","MEASUREMENT_UPDATED","removed","MEASUREMENT_REMOVED","cleared","MEASUREMENTS_CLEARED","debounce","current","scrollTop","scrollHeight","jumpToImage","jumpToMeasurement","onMeasurementItemClickHandler","onMeasurementItemEditHandler","getMeasurement","onSubmitHandler","_ref4","update","_ref5","_ref6","displayMeasurementsWithoutFindings","dm","POINT","additionalFindings","ref","StudySummary","MeasurementTable","onEdit","iconName","iconLabel","component","Component","OHIFCornerstoneViewport","props","fallback","_extends","packageJson","getContextModule","getPanelModule","getViewportModule"],"sourceRoot":""}